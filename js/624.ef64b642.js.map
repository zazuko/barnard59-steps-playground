{"version":3,"file":"js/624.ef64b642.js","mappings":"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","sources":["webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/BlankNode.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/DataFactory.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/DefaultGraph.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/Literal.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/NamedNode.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/Quad.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/Variable.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/fromTerm.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/sink/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/canonicalize/lib/canonicalize.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/cross-fetch/dist/browser-polyfill.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/http-link-header/lib/link.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-context-parser/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-context-parser/lib/ContextParser.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-context-parser/lib/ErrorCoded.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-context-parser/lib/IDocumentLoader.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-context-parser/lib/JsonLdContext.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-context-parser/lib/Util.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/ContextTree.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/JsonLdParser.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/ParsingContext.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/Util.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/jsonparse/jsonparse.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/rdf-data-factory/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/rdf-data-factory/lib/BlankNode.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/rdf-data-factory/lib/DataFactory.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/rdf-data-factory/lib/DefaultGraph.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/rdf-data-factory/lib/Literal.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/rdf-data-factory/lib/NamedNode.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/rdf-data-factory/lib/Quad.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/rdf-data-factory/lib/Variable.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/relative-to-absolute-iri/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/relative-to-absolute-iri/lib/Resolve.js"],"sourcesContent":["const Sink = require('@rdfjs/sink')\nconst ParserStream = require('./lib/ParserStream')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const rdf = require('@rdfjs/data-model')\nconst { JsonLdParser } = require('jsonld-streaming-parser')\nconst { Transform } = require('readable-stream')\n\nconst relativeIriProtocol = 'null:'\n\nfunction termCleanup (factory) {\n  return term => {\n    if (term.termType !== 'NamedNode') {\n      return null\n    }\n\n    if (!term.value.startsWith(relativeIriProtocol)) {\n      return null\n    }\n\n    // remove dummy protocol workaround for relative IRIs\n    return factory.namedNode(term.value.slice(relativeIriProtocol.length))\n  }\n}\n\nfunction quadCleanup (factory) {\n  const cleanup = termCleanup(factory)\n\n  return quad => {\n    const subject = cleanup(quad.subject)\n    const predicate = cleanup(quad.predicate)\n    const object = cleanup(quad.object)\n    const graph = cleanup(quad.graph)\n\n    if (subject || predicate || object || graph) {\n      return factory.quad(\n        subject || quad.subject,\n        predicate || quad.predicate,\n        object || quad.object,\n        graph || quad.graph\n      )\n    }\n\n    return quad\n  }\n}\n\nclass ParserStream {\n  constructor (input, { baseIRI = relativeIriProtocol, context = null, factory = rdf } = {}) {\n    const parser = new JsonLdParser({\n      baseIRI,\n      context,\n      dataFactory: factory,\n      streamingProfile: false\n    })\n\n    input.pipe(parser)\n\n    const cleanup = quadCleanup(factory)\n\n    const transform = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, cleanup(quad))\n      }\n    })\n\n    parser.on('context', context => {\n      Object.entries(context).forEach(([prefix, iri]) => {\n        transform.emit('prefix', prefix, factory.namedNode(iri))\n      })\n    })\n    parser.on('error', err => transform.destroy(err))\n    parser.pipe(transform)\n\n    return transform\n  }\n}\n\nmodule.exports = ParserStream\n","const DataFactory = require('./lib/DataFactory.js')\n\nmodule.exports = DataFactory\n","class BlankNode {\n  constructor (id) {\n    this.value = id || ('b' + (++BlankNode.nextId))\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n","const BlankNode = require('./BlankNode.js')\nconst DefaultGraph = require('./DefaultGraph.js')\nconst fromTermRaw = require('./fromTerm.js')\nconst Literal = require('./Literal.js')\nconst NamedNode = require('./NamedNode.js')\nconst Quad = require('./Quad.js')\nconst Variable = require('./Variable.js')\n\nfunction namedNode (value) {\n  return new NamedNode(value)\n}\n\nfunction blankNode (value) {\n  return new BlankNode(value)\n}\n\nfunction literal (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nfunction variable (value) {\n  return new Variable(value)\n}\n\nfunction defaultGraph () {\n  return DataFactory.defaultGraphInstance\n}\n\nfunction triple (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nfunction quad (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nfunction fromTerm (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nfunction fromQuad (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n}\n\nmodule.exports = DataFactory\n","class DefaultGraph {\n  equals (other) {\n    return !!other && other.termType === this.termType\n  }\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\nDefaultGraph.prototype.value = ''\n\nmodule.exports = DefaultGraph\n","const NamedNode = require('./NamedNode.js')\n\nclass Literal {\n  constructor (value, language, datatype) {\n    this.value = value\n    this.datatype = Literal.stringDatatype\n    this.language = ''\n\n    if (language) {\n      this.language = language\n      this.datatype = Literal.langStringDatatype\n    } else if (datatype) {\n      this.datatype = datatype\n    }\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value &&\n      other.language === this.language && other.datatype.equals(this.datatype)\n  }\n}\n\nLiteral.prototype.termType = 'Literal'\n\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n","class NamedNode {\n  constructor (iri) {\n    this.value = iri\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n","const DefaultGraph = require('./DefaultGraph.js')\n\nclass Quad {\n  constructor (subject, predicate, object, graph) {\n    this.subject = subject\n    this.predicate = predicate\n    this.object = object\n\n    if (graph) {\n      this.graph = graph\n    } else {\n      this.graph = new DefaultGraph()\n    }\n  }\n\n  equals (other) {\n    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n    return !!other && (other.termType === 'Quad' || !other.termType) &&\n      other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n      other.object.equals(this.object) && other.graph.equals(this.graph)\n  }\n}\n\nQuad.prototype.termType = 'Quad'\nQuad.prototype.value = ''\n\nmodule.exports = Quad\n","class Variable {\n  constructor (name) {\n    this.value = name\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n","function fromTerm (original) {\n  if (!original) {\n    return null\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value)\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph()\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value)\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject)\n    const predicate = this.fromTerm(original.predicate)\n    const object = this.fromTerm(original.object)\n    const graph = this.fromTerm(original.graph)\n\n    return this.quad(subject, predicate, object, graph)\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value)\n  }\n\n  throw new Error(`unknown termType ${original.termType}`)\n}\n\nmodule.exports = fromTerm\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","/* jshint esversion: 6 */\n/* jslint node: true */\n'use strict';\n\nmodule.exports = function serialize (object) {\n  if (object === null || typeof object !== 'object' || object.toJSON != null) {\n    return JSON.stringify(object);\n  }\n\n  if (Array.isArray(object)) {\n    return '[' + object.reduce((t, cv, ci) => {\n      const comma = ci === 0 ? '' : ',';\n      const value = cv === undefined || typeof cv === 'symbol' ? null : cv;\n      return t + comma + serialize(value);\n    }, '') + ']';\n  }\n\n  return '{' + Object.keys(object).sort().reduce((t, cv, ci) => {\n    if (object[cv] === undefined ||\n        typeof object[cv] === 'symbol') {\n      return t;\n    }\n    const comma = t.length === 0 ? '' : ',';\n    return t + comma + serialize(cv) + ':' + serialize(object[cv]);\n  }, '') + '}';\n};\n","(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(typeof self !== 'undefined' ? self : this);\n","'use strict'\n\nvar COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i\nvar WS_TRIM_PATTERN = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g\nvar WS_CHAR_PATTERN = /\\s|\\uFEFF|\\xA0/\nvar WS_FOLD_PATTERN = /\\r?\\n[\\x20\\x09]+/g\nvar DELIMITER_PATTERN = /[;,\"]/\nvar WS_DELIMITER_PATTERN = /[;,\"]|\\s/\n\n/**\n * Token character pattern\n * @type {RegExp}\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nvar TOKEN_PATTERN = /^[!#$%&'*+\\-\\.^_`|~\\da-zA-Z]+$/\n\nvar STATE = {\n  IDLE: 1 << 0,\n  URI: 1 << 1,\n  ATTR: 1 << 2,\n}\n\nfunction trim( value ) {\n  return value.replace( WS_TRIM_PATTERN, '' )\n}\n\nfunction hasWhitespace( value ) {\n  return WS_CHAR_PATTERN.test( value )\n}\n\nfunction skipWhitespace( value, offset ) {\n  while( hasWhitespace( value[offset] ) ) {\n    offset++\n  }\n  return offset\n}\n\nfunction needsQuotes( value ) {\n  return WS_DELIMITER_PATTERN.test( value ) ||\n    !TOKEN_PATTERN.test( value )\n}\n\nclass Link {\n\n  /**\n   * Link\n   * @constructor\n   * @param {String} [value]\n   * @returns {Link}\n   */\n  constructor( value ) {\n\n    /** @type {Array} URI references */\n    this.refs = []\n\n    if( value ) {\n      this.parse( value )\n    }\n\n  }\n\n  /**\n   * Get refs with given relation type\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  rel( value ) {\n\n    var links = []\n    var type = value.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ].rel.toLowerCase() === type ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  /**\n   * Get refs where given attribute has a given value\n   * @param {String} attr\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  get( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    var links = []\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  set( link ) {\n    this.refs.push( link )\n    return this\n  }\n\n  has( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        return true\n      }\n    }\n\n    return false\n\n  }\n\n  parse( value, offset ) {\n\n    offset = offset || 0\n    value = offset ? value.slice( offset ) : value\n\n    // Trim & unfold folded lines\n    value = trim( value ).replace( WS_FOLD_PATTERN, '' )\n\n    var state = STATE.IDLE\n    var length = value.length\n    var offset = 0\n    var ref = null\n\n    while( offset < length ) {\n      if( state === STATE.IDLE ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === '<' ) {\n          if( ref != null ) {\n            ref.rel != null ?\n              this.refs.push( ...Link.expandRelations( ref ) ) :\n              this.refs.push( ref )\n          }\n          var end = value.indexOf( '>', offset )\n          if( end === -1 ) throw new Error( 'Expected end of URI delimiter at offset ' + offset )\n          ref = { uri: value.slice( offset + 1, end ) }\n          // this.refs.push( ref )\n          offset = end\n          state = STATE.URI\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n        offset++\n      } else if( state === STATE.URI ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === ';' ) {\n          state = STATE.ATTR\n          offset++\n        } else if( value[offset] === ',' ) {\n          state = STATE.IDLE\n          offset++\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n      } else if( state === STATE.ATTR ) {\n        if( value[offset] ===';' || hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        }\n        var end = value.indexOf( '=', offset )\n        if( end === -1 ) throw new Error( 'Expected attribute delimiter at offset ' + offset )\n        var attr = trim( value.slice( offset, end ) ).toLowerCase()\n        var attrValue = ''\n        offset = end + 1\n        offset = skipWhitespace( value, offset )\n        if( value[offset] === '\"' ) {\n          offset++\n          while( offset < length ) {\n            if( value[offset] === '\"' ) {\n              offset++; break\n            }\n            if( value[offset] === '\\\\' ) {\n              offset++\n            }\n            attrValue += value[offset]\n            offset++\n          }\n        } else {\n          var end = offset + 1\n          while( !DELIMITER_PATTERN.test( value[end] ) && end < length ) {\n            end++\n          }\n          attrValue = value.slice( offset, end )\n          offset = end\n        }\n        if( ref[ attr ] && Link.isSingleOccurenceAttr( attr ) ) {\n          // Ignore multiples of attributes which may only appear once\n        } else if( attr[ attr.length - 1 ] === '*' ) {\n          ref[ attr ] = Link.parseExtendedValue( attrValue )\n        } else {\n          attrValue = attr === 'type' ?\n            attrValue.toLowerCase() : attrValue\n          if( ref[ attr ] != null ) {\n            if( Array.isArray( ref[ attr ] ) ) {\n              ref[ attr ].push( attrValue )\n            } else {\n              ref[ attr ] = [ ref[ attr ], attrValue ]\n            }\n          } else {\n            ref[ attr ] = attrValue\n          }\n        }\n        switch( value[offset] ) {\n          case ',': state = STATE.IDLE; break\n          case ';': state = STATE.ATTR; break\n        }\n        offset++\n      } else {\n        throw new Error( 'Unknown parser state \"' + state + '\"' )\n      }\n    }\n\n    if( ref != null ) {\n      ref.rel != null ?\n        this.refs.push( ...Link.expandRelations( ref ) ) :\n        this.refs.push( ref )\n    }\n\n    ref = null\n\n    return this\n\n  }\n\n  toString() {\n\n    var refs = []\n    var link = ''\n    var ref = null\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      ref = this.refs[i]\n      link = Object.keys( this.refs[i] ).reduce( function( link, attr ) {\n        if( attr === 'uri' ) return link\n        return link + '; ' + Link.formatAttribute( attr, ref[ attr ] )\n      }, '<' + ref.uri + '>' )\n      refs.push( link )\n    }\n\n    return refs.join( ', ' )\n\n  }\n\n}\n\n/**\n * Determines whether an encoding can be\n * natively handled with a `Buffer`\n * @param {String} value\n * @returns {Boolean}\n */\nLink.isCompatibleEncoding = function( value ) {\n  return COMPATIBLE_ENCODING_PATTERN.test( value )\n}\n\nLink.parse = function( value, offset ) {\n  return new Link().parse( value, offset )\n}\n\nLink.isSingleOccurenceAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'media' ||\n    attr === 'title' || attr === 'title*'\n}\n\nLink.isTokenAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'anchor'\n}\n\nLink.escapeQuotes = function( value ) {\n  return value.replace( /\"/g, '\\\\\"' )\n}\n\nLink.expandRelations = function( ref ) {\n  var rels = ref.rel.split( ' ' )\n  return rels.map( function( rel ) {\n    var value = Object.assign( {}, ref )\n    value.rel = rel\n    return value\n  })\n}\n\n/**\n * Parses an extended value and attempts to decode it\n * @internal\n * @param {String} value\n * @return {Object}\n */\nLink.parseExtendedValue = function( value ) {\n  var parts = /([^']+)?(?:'([^']+)')?(.+)/.exec( value )\n  return {\n    language: parts[2].toLowerCase(),\n    encoding: Link.isCompatibleEncoding( parts[1] ) ?\n      null : parts[1].toLowerCase(),\n    value: Link.isCompatibleEncoding( parts[1] ) ?\n      decodeURIComponent( parts[3] ) : parts[3]\n  }\n}\n\n/**\n * Format a given extended attribute and it's value\n * @param {String} attr\n * @param {Object} data\n * @return {String}\n */\nLink.formatExtendedAttribute = function( attr, data ) {\n\n  var encoding = ( data.encoding || 'utf-8' ).toUpperCase()\n  var language = data.language || 'en'\n\n  var encodedValue = ''\n\n  if( Buffer.isBuffer( data.value ) && Link.isCompatibleEncoding( encoding ) ) {\n    encodedValue = data.value.toString( encoding )\n  } else if( Buffer.isBuffer( data.value ) ) {\n    encodedValue = data.value.toString( 'hex' )\n      .replace( /[0-9a-f]{2}/gi, '%$1' )\n  } else {\n    encodedValue = encodeURIComponent( data.value )\n  }\n\n  return attr + '=' + encoding + '\\'' +\n    language + '\\'' + encodedValue\n\n}\n\n/**\n * Format a given attribute and it's value\n * @param {String} attr\n * @param {String|Object} value\n * @return {String}\n */\nLink.formatAttribute = function( attr, value ) {\n\n  if( Array.isArray( value ) ) {\n    return value.map(( item ) => {\n      return Link.formatAttribute( attr, item )\n    }).join( '; ' )\n  }\n\n  if( attr[ attr.length - 1 ] === '*' || typeof value !== 'string' ) {\n    return Link.formatExtendedAttribute( attr, value )\n  }\n\n  if( Link.isTokenAttr( attr ) ) {\n    value = needsQuotes( value ) ?\n      '\"' + Link.escapeQuotes( value ) + '\"' :\n      Link.escapeQuotes( value )\n  } else if( needsQuotes( value ) ) {\n    value = encodeURIComponent( value )\n    // We don't need to escape <SP> <,> <;> within quotes\n    value = value\n      .replace( /%20/g, ' ' )\n      .replace( /%2C/g, ',' )\n      .replace( /%3B/g, ';' )\n\n    value = '\"' + value + '\"'\n  }\n\n  return attr + '=' + value\n\n}\n\nmodule.exports = Link\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/ContextParser\"), exports);\n__exportStar(require(\"./lib/ErrorCoded\"), exports);\n__exportStar(require(\"./lib/FetchDocumentLoader\"), exports);\n__exportStar(require(\"./lib/IDocumentLoader\"), exports);\n__exportStar(require(\"./lib/JsonLdContext\"), exports);\n__exportStar(require(\"./lib/JsonLdContextNormalized\"), exports);\n__exportStar(require(\"./lib/Util\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultExpandOptions = exports.ContextParser = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst FetchDocumentLoader_1 = require(\"./FetchDocumentLoader\");\nconst JsonLdContextNormalized_1 = require(\"./JsonLdContextNormalized\");\nconst Util_1 = require(\"./Util\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Parses JSON-LD contexts.\n */\nclass ContextParser {\n    constructor(options) {\n        options = options || {};\n        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();\n        this.documentCache = {};\n        this.validateContext = !options.skipValidation;\n        this.expandContentTypeToBase = !!options.expandContentTypeToBase;\n        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;\n        this.redirectSchemaOrgHttps = 'redirectSchemaOrgHttps' in options ? !!options.redirectSchemaOrgHttps : true;\n    }\n    /**\n     * Validate the given @language value.\n     * An error will be thrown if it is invalid.\n     * @param value An @language value.\n     * @param {boolean} strictRange If the string value should be strictly checked against a regex.\n     * @param {string} errorCode The error code to emit on errors.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateLanguage(value, strictRange, errorCode) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);\n        }\n        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {\n            if (strictRange) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate the given @direction value.\n     * An error will be thrown if it is invalid.\n     * @param value An @direction value.\n     * @param {boolean} strictValues If the string value should be strictly checked against a regex.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateDirection(value, strictValues) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n        }\n        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {\n            if (strictValues) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Add an @id term for all @reverse terms.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    idifyReverseTerms(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (value['@reverse'] && !value['@id']) {\n                    if (typeof value['@reverse'] !== 'string' || Util_1.Util.isValidKeyword(value['@reverse'])) {\n                        throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value['@reverse']}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                    }\n                    value['@id'] = value['@reverse'];\n                    if (Util_1.Util.isPotentialKeyword(value['@reverse'])) {\n                        delete value['@reverse'];\n                    }\n                    else {\n                        value['@reverse'] = true;\n                    }\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Expand all prefixed terms in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded\n     *                                          via @base if @vocab is set to null.\n     */\n    expandPrefixedTerms(context, expandContentTypeToBase) {\n        const contextRaw = context.getContextRaw();\n        for (const key of Object.keys(contextRaw)) {\n            // Only expand allowed keys\n            if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {\n                // Error if we try to alias a keyword to something else.\n                const keyValue = contextRaw[key];\n                if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {\n                    if (key !== '@type' || typeof contextRaw[key] === 'object'\n                        && !(contextRaw[key]['@protected'] || contextRaw[key]['@container'] === '@set')) {\n                        throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                    }\n                }\n                // Error if we try to alias to an illegal keyword\n                if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {\n                    throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);\n                }\n                // Error if this term was marked as prefix as well\n                if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue))\n                    && keyValue['@prefix'] === true) {\n                    throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // Loop because prefixes might be nested\n                while (Util_1.Util.isPrefixValue(contextRaw[key])) {\n                    const value = contextRaw[key];\n                    let changed = false;\n                    if (typeof value === 'string') {\n                        contextRaw[key] = context.expandTerm(value, true);\n                        changed = changed || value !== contextRaw[key];\n                    }\n                    else {\n                        const id = value['@id'];\n                        const type = value['@type'];\n                        // If @id is missing, don't allow @id to be added if @prefix: true and key not being a valid IRI.\n                        const canAddIdEntry = !('@prefix' in value) || Util_1.Util.isValidIri(key);\n                        if ('@id' in value) {\n                            // Use @id value for expansion\n                            if (id !== undefined && id !== null && typeof id === 'string') {\n                                contextRaw[key]['@id'] = context.expandTerm(id, true);\n                                changed = changed || id !== contextRaw[key]['@id'];\n                            }\n                        }\n                        else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {\n                            // Add an explicit @id value based on the expanded key value\n                            const newId = context.expandTerm(key, true);\n                            if (newId !== key) {\n                                // Don't set @id if expansion failed\n                                contextRaw[key]['@id'] = newId;\n                                changed = true;\n                            }\n                        }\n                        if (type && typeof type === 'string' && type !== '@vocab'\n                            && (!value['@container'] || !value['@container']['@type'])\n                            && canAddIdEntry) {\n                            // First check @vocab, then fallback to @base\n                            contextRaw[key]['@type'] = context.expandTerm(type, true);\n                            if (expandContentTypeToBase && type === contextRaw[key]['@type']) {\n                                contextRaw[key]['@type'] = context.expandTerm(type, false);\n                            }\n                            changed = changed || type !== contextRaw[key]['@type'];\n                        }\n                    }\n                    if (!changed) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Normalize the @language entries in the given context to lowercase.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} parseOptions The parsing options.\n     */\n    normalize(context, { processingMode, normalizeLanguageTags }) {\n        // Lowercase language keys in 1.0\n        if (normalizeLanguageTags || processingMode === 1.0) {\n            for (const key of Object.keys(context)) {\n                if (key === '@language' && typeof context[key] === 'string') {\n                    context[key] = context[key].toLowerCase();\n                }\n                else {\n                    const value = context[key];\n                    if (value && typeof value === 'object') {\n                        if (typeof value['@language'] === 'string') {\n                            value['@language'] = value['@language'].toLowerCase();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert all @container strings and array values to hash-based values.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     */\n    containersToHash(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (typeof value['@container'] === 'string') {\n                    value['@container'] = { [value['@container']]: true };\n                }\n                else if (Array.isArray(value['@container'])) {\n                    const newValue = {};\n                    for (const containerValue of value['@container']) {\n                        newValue[containerValue] = true;\n                    }\n                    value['@container'] = newValue;\n                }\n            }\n        }\n    }\n    /**\n     * Normalize and apply context-levevl @protected terms onto each term separately.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {number} processingMode The processing mode.\n     */\n    applyScopedProtected(context, { processingMode }) {\n        if (processingMode && processingMode >= 1.1) {\n            if (context['@protected']) {\n                for (const key of Object.keys(context)) {\n                    if (Util_1.Util.isReservedInternalKeyword(key)) {\n                        continue;\n                    }\n                    if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {\n                        const value = context[key];\n                        if (value && typeof value === 'object') {\n                            if (!('@protected' in context[key])) {\n                                // Mark terms with object values as protected if they don't have an @protected: false annotation\n                                context[key]['@protected'] = true;\n                            }\n                        }\n                        else {\n                            // Convert string-based term values to object-based values with @protected: true\n                            context[key] = {\n                                '@id': value,\n                                '@protected': true,\n                            };\n                        }\n                    }\n                }\n                delete context['@protected'];\n            }\n        }\n    }\n    /**\n     * Check if the given context inheritance does not contain any overrides of protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.\n     * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.\n     */\n    validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions) {\n        for (const key of Object.keys(contextAfter)) {\n            if (Util_1.Util.isTermProtected(contextBefore, key)) {\n                // The entry in the context before will always be in object-mode\n                // If the new entry is in string-mode, convert it to object-mode\n                // before checking if it is identical.\n                if (typeof contextAfter[key] === 'string') {\n                    const isPrefix = Util_1.Util.isSimpleTermDefinitionPrefix(contextAfter[key], expandOptions);\n                    contextAfter[key] = { '@id': contextAfter[key] };\n                    // If the simple term def was a prefix, explicitly mark the term as a prefix in the expanded term definition,\n                    // because otherwise we loose this information due to JSON-LD interpreting prefixes differently\n                    // in simple vs expanded term definitions.\n                    if (isPrefix) {\n                        contextAfter[key]['@prefix'] = true;\n                        contextBefore[key]['@prefix'] = true; // Also on before, to make sure the next step still considers them ==\n                    }\n                }\n                // Convert term values to strings for each comparison\n                const valueBefore = canonicalizeJson(contextBefore[key]);\n                // We modify this deliberately,\n                // as we need it for the value comparison (they must be identical modulo '@protected')),\n                // and for the fact that this new value will override the first one.\n                contextAfter[key]['@protected'] = true;\n                const valueAfter = canonicalizeJson(contextAfter[key]);\n                // Error if they are not identical\n                if (valueBefore !== valueAfter) {\n                    throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Validate the entries of the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options The parse options.\n     */\n    validate(context, { processingMode }) {\n        for (const key of Object.keys(context)) {\n            // Ignore reserved internal keywords.\n            if (Util_1.Util.isReservedInternalKeyword(key)) {\n                continue;\n            }\n            // Do not allow empty term\n            if (key === '') {\n                throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n            }\n            const value = context[key];\n            const valueType = typeof value;\n            // First check if the key is a keyword\n            if (Util_1.Util.isPotentialKeyword(key)) {\n                switch (key.substr(1)) {\n                    case 'vocab':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                        }\n                        break;\n                    case 'base':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);\n                        }\n                        break;\n                    case 'language':\n                        if (value !== null) {\n                            ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);\n                        }\n                        break;\n                    case 'version':\n                        if (value !== null && valueType !== 'number') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                        }\n                        break;\n                    case 'direction':\n                        if (value !== null) {\n                            ContextParser.validateDirection(value, true);\n                        }\n                        break;\n                    case 'propagate':\n                        if (processingMode === 1.0) {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                        }\n                        if (value !== null && valueType !== 'boolean') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);\n                        }\n                        break;\n                }\n                // Don't allow keywords to be overridden\n                if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {\n                    throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util\n                        .getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                }\n                continue;\n            }\n            // Otherwise, consider the key a term\n            if (value !== null) {\n                switch (valueType) {\n                    case 'string':\n                        if (Util_1.Util.getPrefix(value, context) === key) {\n                            throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                        }\n                        if (Util_1.Util.isValidIriWeak(key)) {\n                            if (value === '@type') {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                            else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                        }\n                        break;\n                    case 'object':\n                        if (!Util_1.Util.isCompactIri(key) && !('@id' in value)\n                            && (value['@type'] === '@id' ? !context['@base'] : !context['@vocab'])) {\n                            throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                        }\n                        for (const objectKey of Object.keys(value)) {\n                            const objectValue = value[objectKey];\n                            if (!objectValue) {\n                                continue;\n                            }\n                            switch (objectKey) {\n                                case '@id':\n                                    if (Util_1.Util.isValidKeyword(objectValue)\n                                        && objectValue !== '@type' && objectValue !== '@id' && objectValue !== '@graph') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.isValidIriWeak(key)) {\n                                        if (objectValue === '@type') {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                        else if (Util_1.Util.isValidIri(objectValue)\n                                            && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.getPrefix(objectValue, context) === key) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                            .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                                    }\n                                    break;\n                                case '@type':\n                                    if (value['@container'] === '@type' && objectValue !== '@id' && objectValue !== '@vocab') {\n                                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (objectValue !== '@id' && objectValue !== '@vocab'\n                                        && (processingMode === 1.0 || objectValue !== '@json')\n                                        && (processingMode === 1.0 || objectValue !== '@none')\n                                        && (objectValue[0] === '_' || !Util_1.Util.isValidIri(objectValue))) {\n                                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    break;\n                                case '@reverse':\n                                    if (typeof objectValue === 'string' && value['@id'] && value['@id'] !== objectValue) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':\\\n'${objectValue}' and '${value['@id']}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    if ('@nest' in value) {\n                                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    break;\n                                case '@container':\n                                    if (processingMode === 1.0) {\n                                        if (Object.keys(objectValue).length > 1\n                                            || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, \\\nmust be only one of ${Util_1.Util.CONTAINERS_1_0.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    for (const containerValue of Object.keys(objectValue)) {\n                                        if (containerValue === '@list' && value['@reverse']) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                        }\n                                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), \\\nmust be one of ${Util_1.Util.CONTAINERS.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    break;\n                                case '@language':\n                                    ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);\n                                    break;\n                                case '@direction':\n                                    ContextParser.validateDirection(objectValue, true);\n                                    break;\n                                case '@prefix':\n                                    if (objectValue !== null && typeof objectValue !== 'boolean') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);\n                                    }\n                                    if (!('@id' in value) && !Util_1.Util.isValidIri(key)) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@index':\n                                    if (processingMode === 1.0 || !value['@container'] || !value['@container']['@index']) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@nest':\n                                    if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);\n                                    }\n                            }\n                        }\n                        break;\n                    default:\n                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Apply the @base context entry to the given context under certain circumstances.\n     * @param context A context.\n     * @param options Parsing options.\n     * @param inheritFromParent If the @base value from the parent context can be inherited.\n     * @return The given context.\n     */\n    applyBaseEntry(context, options, inheritFromParent) {\n        // In some special cases, this can be a string, so ignore those.\n        if (typeof context === 'string') {\n            return context;\n        }\n        // Give priority to @base in the parent context\n        if (inheritFromParent && !('@base' in context) && options.parentContext\n            && typeof options.parentContext === 'object' && '@base' in options.parentContext) {\n            context['@base'] = options.parentContext['@base'];\n            if (options.parentContext['@__baseDocument']) {\n                context['@__baseDocument'] = true;\n            }\n        }\n        // Override the base IRI if provided.\n        if (options.baseIRI && !options.external) {\n            if (!('@base' in context)) {\n                // The context base is the document base\n                context['@base'] = options.baseIRI;\n                context['@__baseDocument'] = true;\n            }\n            else if (context['@base'] !== null && typeof context['@base'] === 'string'\n                && !Util_1.Util.isValidIri(context['@base'])) {\n                // The context base is relative to the document base\n                context['@base'] = relative_to_absolute_iri_1.resolve(context['@base'], options.parentContext && options.parentContext['@base'] || options.baseIRI);\n            }\n        }\n        return context;\n    }\n    /**\n     * Resolve relative context IRIs, or return full IRIs as-is.\n     * @param {string} contextIri A context IRI.\n     * @param {string} baseIRI A base IRI.\n     * @return {string} The normalized context IRI.\n     */\n    normalizeContextIri(contextIri, baseIRI) {\n        if (!Util_1.Util.isValidIri(contextIri)) {\n            try {\n                contextIri = relative_to_absolute_iri_1.resolve(contextIri, baseIRI);\n            }\n            catch (_a) {\n                throw new Error(`Invalid context IRI: ${contextIri}`);\n            }\n        }\n        // TODO: Temporary workaround for fixing schema.org CORS issues (https://github.com/schemaorg/schemaorg/issues/2578#issuecomment-652324465)\n        if (this.redirectSchemaOrgHttps && contextIri.startsWith('http://schema.org')) {\n            contextIri = 'https://schema.org/';\n        }\n        return contextIri;\n    }\n    /**\n     * Parse scoped contexts in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options Parsing options.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    async parseInnerContexts(context, options) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if ('@context' in value && value['@context'] !== null && !options.ignoreScopedContexts) {\n                    // Simulate a processing based on the parent context to check if there are any (potential errors).\n                    // Honestly, I find it a bit weird to do this here, as the context may be unused,\n                    // and the final effective context may differ based on any other embedded/scoped contexts.\n                    // But hey, it's part of the spec, so we have no choice...\n                    // https://w3c.github.io/json-ld-api/#h-note-10\n                    if (this.validateContext) {\n                        try {\n                            const parentContext = Object.assign({}, context);\n                            parentContext[key] = Object.assign({}, parentContext[key]);\n                            delete parentContext[key]['@context'];\n                            await this.parse(value['@context'], Object.assign(Object.assign({}, options), { parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));\n                        }\n                        catch (e) {\n                            throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);\n                        }\n                    }\n                    value['@context'] = (await this.parse(value['@context'], Object.assign(Object.assign({}, options), { minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context })))\n                        .getContextRaw();\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Parse a JSON-LD context in any form.\n     * @param {JsonLdContext} context A context, URL to a context, or an array of contexts/URLs.\n     * @param {IParseOptions} options Optional parsing options.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the context.\n     */\n    async parse(context, options = {}) {\n        const { baseIRI, parentContext: parentContextInitial, external, processingMode = ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing, } = options;\n        let parentContext = parentContextInitial;\n        const remoteContexts = options.remoteContexts || {};\n        // Avoid remote context overflows\n        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {\n            throw new ErrorCoded_1.ErrorCoded('Detected an overflow in remote context inclusions: ' + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);\n        }\n        if (context === null || context === undefined) {\n            // Don't allow context nullification and there are protected terms\n            if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {\n                throw new ErrorCoded_1.ErrorCoded('Illegal context nullification when terms are protected', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);\n            }\n            // Context that are explicitly set to null are empty.\n            return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));\n        }\n        else if (typeof context === 'string') {\n            const contextIri = this.normalizeContextIri(context, baseIRI);\n            const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n            if (overriddenLoad) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);\n            }\n            const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));\n            this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);\n            return parsedStringContext;\n        }\n        else if (Array.isArray(context)) {\n            // As a performance consideration, first load all external contexts in parallel.\n            const contextIris = [];\n            const contexts = await Promise.all(context.map((subContext, i) => {\n                if (typeof subContext === 'string') {\n                    const contextIri = this.normalizeContextIri(subContext, baseIRI);\n                    contextIris[i] = contextIri;\n                    const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n                    if (overriddenLoad) {\n                        return overriddenLoad;\n                    }\n                    return this.load(contextIri);\n                }\n                else {\n                    return subContext;\n                }\n            }));\n            // Don't apply inheritance logic on minimal processing\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);\n            }\n            const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise\n                .then((accContext) => this.parse(contextEntry, Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }))), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));\n            // Override the base IRI if provided.\n            this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);\n            return reducedContexts;\n        }\n        else if (typeof context === 'object') {\n            if ('@context' in context) {\n                return await this.parse(context['@context'], options);\n            }\n            // Make a deep clone of the given context, to avoid modifying it.\n            context = JSON.parse(JSON.stringify(context)); // No better way in JS at the moment.\n            if (parentContext && !minimalProcessing) {\n                parentContext = JSON.parse(JSON.stringify(parentContext));\n            }\n            // We have an actual context object.\n            let newContext = {};\n            // According to the JSON-LD spec, @base must be ignored from external contexts.\n            if (external) {\n                delete context['@base'];\n            }\n            // Override the base IRI if provided.\n            this.applyBaseEntry(context, options, true);\n            // Hashify container entries\n            // Do this before protected term validation as that influences term format\n            this.containersToHash(context);\n            // Don't perform any other modifications if only minimal processing is needed.\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);\n            }\n            // In JSON-LD 1.1, load @import'ed context prior to processing.\n            let importContext = {};\n            if ('@import' in context) {\n                if (processingMode >= 1.1) {\n                    // Only accept string values\n                    if (typeof context['@import'] !== 'string') {\n                        throw new ErrorCoded_1.ErrorCoded('An @import value must be a string, but got ' + typeof context['@import'], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);\n                    }\n                    // Load context\n                    importContext = await this.loadImportContext(this.normalizeContextIri(context['@import'], baseIRI));\n                    delete context['@import'];\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded('Context importing is not supported in JSON-LD 1.0', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                }\n            }\n            // Merge different parts of the final context in order\n            newContext = Object.assign(Object.assign(Object.assign(Object.assign({}, newContext), (typeof parentContext === 'object' ? parentContext : {})), importContext), context);\n            const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);\n            // Parse inner contexts with minimal processing\n            await this.parseInnerContexts(newContext, options);\n            // In JSON-LD 1.1, @vocab can be relative to @vocab in the parent context.\n            if ((newContext && newContext['@version'] || ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1\n                && ((context['@vocab'] && typeof context['@vocab'] === 'string') || context['@vocab'] === '')\n                && context['@vocab'].indexOf(':') < 0 && parentContext && '@vocab' in parentContext) {\n                newContext['@vocab'] = parentContext['@vocab'] + context['@vocab'];\n            }\n            // Handle terms (before protection checks)\n            this.idifyReverseTerms(newContext);\n            this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase);\n            // In JSON-LD 1.1, check if we are not redefining any protected keywords\n            if (!ignoreProtection && parentContext && processingMode >= 1.1) {\n                this.validateKeywordRedefinitions(parentContext, newContext, exports.defaultExpandOptions);\n            }\n            this.normalize(newContext, { processingMode, normalizeLanguageTags });\n            this.applyScopedProtected(newContext, { processingMode });\n            if (this.validateContext) {\n                this.validate(newContext, { processingMode });\n            }\n            return newContextWrapped;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);\n        }\n    }\n    /**\n     * Fetch the given URL as a raw JSON-LD context.\n     * @param url An URL.\n     * @return A promise resolving to a raw JSON-LD context.\n     */\n    async load(url) {\n        // First try to retrieve the context from cache\n        const cached = this.documentCache[url];\n        if (cached) {\n            return typeof cached === 'string' ? cached : Array.isArray(cached) ? cached.slice() : Object.assign({}, cached);\n        }\n        // If not in cache, load it\n        let document;\n        try {\n            document = await this.documentLoader.load(url);\n        }\n        catch (e) {\n            throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);\n        }\n        // Validate the context\n        if (!('@context' in document)) {\n            throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        return this.documentCache[url] = document['@context'];\n    }\n    /**\n     * Override the given context that may be loaded.\n     *\n     * This will check whether or not the url is recursively being loaded.\n     * @param url An URL.\n     * @param options Parsing options.\n     * @return An overridden context, or null.\n     *         Optionally an error can be thrown if a cyclic context is detected.\n     */\n    getOverriddenLoad(url, options) {\n        if (url in (options.remoteContexts || {})) {\n            if (options.ignoreRemoteScopedContexts) {\n                return url;\n            }\n            else {\n                throw new ErrorCoded_1.ErrorCoded('Detected a cyclic context inclusion of ' + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);\n            }\n        }\n        return null;\n    }\n    /**\n     * Load an @import'ed context.\n     * @param importContextIri The full URI of an @import value.\n     */\n    async loadImportContext(importContextIri) {\n        // Load the context\n        const importContext = await this.load(importContextIri);\n        // Require the context to be a non-array object\n        if (typeof importContext !== 'object' || Array.isArray(importContext)) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context must be a single object: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        // Error if the context contains another @import\n        if ('@import' in importContext) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context can not import another context: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n        }\n        // Containers have to be converted into hash values the same way as for the importing context\n        // Otherwise context validation will fail for container values\n        this.containersToHash(importContext);\n        return importContext;\n    }\n}\nexports.ContextParser = ContextParser;\nContextParser.DEFAULT_PROCESSING_MODE = 1.1;\nexports.defaultExpandOptions = {\n    allowPrefixForcing: true,\n    allowPrefixNonGenDelims: false,\n    allowVocabRelativeToBase: true,\n};\n//# sourceMappingURL=ContextParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_CODES = exports.ErrorCoded = void 0;\n/**\n * An error that has a certain error code.\n *\n * The error code can be any string.\n * All standardized error codes are listed in {@link ERROR_CODES}.\n */\nclass ErrorCoded extends Error {\n    /* istanbul ignore next */\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nexports.ErrorCoded = ErrorCoded;\n/**\n * All standardized JSON-LD error codes.\n * @see https://w3c.github.io/json-ld-api/#dom-jsonlderrorcode\n */\n// tslint:disable:object-literal-sort-keys\nvar ERROR_CODES;\n(function (ERROR_CODES) {\n    ERROR_CODES[\"COLLIDING_KEYWORDS\"] = \"colliding keywords\";\n    ERROR_CODES[\"CONFLICTING_INDEXES\"] = \"conflicting indexes\";\n    ERROR_CODES[\"CYCLIC_IRI_MAPPING\"] = \"cyclic IRI mapping\";\n    ERROR_CODES[\"INVALID_ID_VALUE\"] = \"invalid @id value\";\n    ERROR_CODES[\"INVALID_INDEX_VALUE\"] = \"invalid @index value\";\n    ERROR_CODES[\"INVALID_NEST_VALUE\"] = \"invalid @nest value\";\n    ERROR_CODES[\"INVALID_PREFIX_VALUE\"] = \"invalid @prefix value\";\n    ERROR_CODES[\"INVALID_PROPAGATE_VALUE\"] = \"invalid @propagate value\";\n    ERROR_CODES[\"INVALID_REVERSE_VALUE\"] = \"invalid @reverse value\";\n    ERROR_CODES[\"INVALID_IMPORT_VALUE\"] = \"invalid @import value\";\n    ERROR_CODES[\"INVALID_VERSION_VALUE\"] = \"invalid @version value\";\n    ERROR_CODES[\"INVALID_BASE_IRI\"] = \"invalid base IRI\";\n    ERROR_CODES[\"INVALID_CONTAINER_MAPPING\"] = \"invalid container mapping\";\n    ERROR_CODES[\"INVALID_CONTEXT_ENTRY\"] = \"invalid context entry\";\n    ERROR_CODES[\"INVALID_CONTEXT_NULLIFICATION\"] = \"invalid context nullification\";\n    ERROR_CODES[\"INVALID_DEFAULT_LANGUAGE\"] = \"invalid default language\";\n    ERROR_CODES[\"INVALID_INCLUDED_VALUE\"] = \"invalid @included value\";\n    ERROR_CODES[\"INVALID_IRI_MAPPING\"] = \"invalid IRI mapping\";\n    ERROR_CODES[\"INVALID_JSON_LITERAL\"] = \"invalid JSON literal\";\n    ERROR_CODES[\"INVALID_KEYWORD_ALIAS\"] = \"invalid keyword alias\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAP_VALUE\"] = \"invalid language map value\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAPPING\"] = \"invalid language mapping\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_STRING\"] = \"invalid language-tagged string\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_VALUE\"] = \"invalid language-tagged value\";\n    ERROR_CODES[\"INVALID_LOCAL_CONTEXT\"] = \"invalid local context\";\n    ERROR_CODES[\"INVALID_REMOTE_CONTEXT\"] = \"invalid remote context\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY\"] = \"invalid reverse property\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_MAP\"] = \"invalid reverse property map\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_VALUE\"] = \"invalid reverse property value\";\n    ERROR_CODES[\"INVALID_SCOPED_CONTEXT\"] = \"invalid scoped context\";\n    ERROR_CODES[\"INVALID_SCRIPT_ELEMENT\"] = \"invalid script element\";\n    ERROR_CODES[\"INVALID_SET_OR_LIST_OBJECT\"] = \"invalid set or list object\";\n    ERROR_CODES[\"INVALID_TERM_DEFINITION\"] = \"invalid term definition\";\n    ERROR_CODES[\"INVALID_TYPE_MAPPING\"] = \"invalid type mapping\";\n    ERROR_CODES[\"INVALID_TYPE_VALUE\"] = \"invalid type value\";\n    ERROR_CODES[\"INVALID_TYPED_VALUE\"] = \"invalid typed value\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT\"] = \"invalid value object\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT_VALUE\"] = \"invalid value object value\";\n    ERROR_CODES[\"INVALID_VOCAB_MAPPING\"] = \"invalid vocab mapping\";\n    ERROR_CODES[\"IRI_CONFUSED_WITH_PREFIX\"] = \"IRI confused with prefix\";\n    ERROR_CODES[\"KEYWORD_REDEFINITION\"] = \"keyword redefinition\";\n    ERROR_CODES[\"LOADING_DOCUMENT_FAILED\"] = \"loading document failed\";\n    ERROR_CODES[\"LOADING_REMOTE_CONTEXT_FAILED\"] = \"loading remote context failed\";\n    ERROR_CODES[\"MULTIPLE_CONTEXT_LINK_HEADERS\"] = \"multiple context link headers\";\n    ERROR_CODES[\"PROCESSING_MODE_CONFLICT\"] = \"processing mode conflict\";\n    ERROR_CODES[\"PROTECTED_TERM_REDEFINITION\"] = \"protected term redefinition\";\n    ERROR_CODES[\"CONTEXT_OVERFLOW\"] = \"context overflow\";\n    ERROR_CODES[\"INVALID_BASE_DIRECTION\"] = \"invalid base direction\";\n    ERROR_CODES[\"RECURSIVE_CONTEXT_INCLUSION\"] = \"recursive context inclusion\";\n    ERROR_CODES[\"INVALID_STREAMING_KEY_ORDER\"] = \"invalid streaming key order\";\n})(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));\n//# sourceMappingURL=ErrorCoded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchDocumentLoader = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * Loads documents via the fetch API.\n */\nclass FetchDocumentLoader {\n    constructor(fetcher) {\n        this.fetcher = fetcher;\n    }\n    async load(url) {\n        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: 'application/ld+json' }) });\n        if (response.ok && response.headers) {\n            let mediaType = response.headers.get('Content-Type');\n            if (mediaType) {\n                const colonPos = mediaType.indexOf(';');\n                if (colonPos > 0) {\n                    mediaType = mediaType.substr(0, colonPos);\n                }\n            }\n            if (mediaType === 'application/ld+json') {\n                // Return JSON-LD if proper content type was returned\n                return (await response.json());\n            }\n            else {\n                // Check for alternate link for a non-JSON-LD response\n                if (response.headers.has('Link')) {\n                    let alternateUrl;\n                    response.headers.forEach((value, key) => {\n                        if (key === 'link') {\n                            const linkHeader = http_link_header_1.parse(value);\n                            for (const link of linkHeader.get('type', 'application/ld+json')) {\n                                if (link.rel === 'alternate') {\n                                    if (alternateUrl) {\n                                        throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                                    }\n                                    alternateUrl = relative_to_absolute_iri_1.resolve(link.uri, url);\n                                }\n                            }\n                        }\n                    });\n                    if (alternateUrl) {\n                        return this.load(alternateUrl);\n                    }\n                }\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        else {\n            throw new Error(response.statusText || `Status code: ${response.status}`);\n        }\n    }\n}\nexports.FetchDocumentLoader = FetchDocumentLoader;\n//# sourceMappingURL=FetchDocumentLoader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IDocumentLoader.js.map","\"use strict\";\n// tslint:disable:max-line-length\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=JsonLdContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdContextNormalized = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ContextParser_1 = require(\"./ContextParser\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst Util_1 = require(\"./Util\");\n/**\n * A class exposing operations over a normalized JSON-LD context.\n */\nclass JsonLdContextNormalized {\n    constructor(contextRaw) {\n        this.contextRaw = contextRaw;\n    }\n    /**\n     * @return The raw inner context.\n     */\n    getContextRaw() {\n        return this.contextRaw;\n    }\n    /**\n     * Expand the term or prefix of the given term if it has one,\n     * otherwise return the term as-is.\n     *\n     * This will try to expand the IRI as much as possible.\n     *\n     * Iff in vocab-mode, then other references to other terms in the context can be used,\n     * such as to `myTerm`:\n     * ```\n     * {\n     *   \"myTerm\": \"http://example.org/myLongTerm\"\n     * }\n     * ```\n     *\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,\n     *                              otherwise it is considered a regular term that is expanded based on @base.\n     * @param {IExpandOptions} options Options that define the way how expansion must be done.\n     * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.\n     * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).\n     */\n    expandTerm(term, expandVocab, options = ContextParser_1.defaultExpandOptions) {\n        const contextValue = this.contextRaw[term];\n        // Immediately return if the term was disabled in the context\n        if (contextValue === null || (contextValue && contextValue['@id'] === null)) {\n            return null;\n        }\n        // Check the @id\n        let validIriMapping = true;\n        if (contextValue && expandVocab) {\n            const value = Util_1.Util.getContextValueId(contextValue);\n            if (value && value !== term) {\n                if (typeof value !== 'string' || (!Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value))) {\n                    // Don't mark this mapping as invalid if we have an unknown keyword, but of the correct form.\n                    if (!Util_1.Util.isPotentialKeyword(value)) {\n                        validIriMapping = false;\n                    }\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        // Check if the term is prefixed\n        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);\n        const vocab = this.contextRaw['@vocab'];\n        const vocabRelative = (!!vocab || vocab === '') && vocab.indexOf(':') < 0;\n        const base = this.contextRaw['@base'];\n        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);\n        if (prefix) {\n            const contextPrefixValue = this.contextRaw[prefix];\n            const value = Util_1.Util.getContextValueId(contextPrefixValue);\n            if (value) {\n                if (typeof contextPrefixValue === 'string' || !options.allowPrefixForcing) {\n                    // If we have a simple term definition,\n                    // check the last character of the prefix to determine whether or not it is a prefix.\n                    // Validate that prefix ends with gen-delim character, unless @prefix is true\n                    if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                else {\n                    // If we have an expanded term definition, default to @prefix: false\n                    if (value[0] !== '_' && !potentialKeyword && !contextPrefixValue['@prefix'] && !(term in this.contextRaw)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                return value + term.substr(prefix.length + 1);\n            }\n        }\n        else if (expandVocab && ((vocab || vocab === '') || (options.allowVocabRelativeToBase && (base && vocabRelative)))\n            && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            if (vocabRelative) {\n                if (options.allowVocabRelativeToBase) {\n                    return ((vocab || base) ? relative_to_absolute_iri_1.resolve(vocab, base) : '') + term;\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                }\n            }\n            else {\n                return vocab + term;\n            }\n        }\n        else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            return relative_to_absolute_iri_1.resolve(term, base);\n        }\n        // Return the term as-is, unless we discovered an invalid IRI mapping for this term in the context earlier.\n        if (validIriMapping) {\n            return term;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n        }\n    }\n    /**\n     * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.\n     *\n     * This will try to compact the IRI as much as possible.\n     *\n     * @param {string} iri An IRI to compact.\n     * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,\n     *                        otherwise it is considered a regular term that is compacted based on @base.\n     * @return {string} The compacted term or the IRI as-is.\n     */\n    compactIri(iri, vocab) {\n        // Try @vocab compacting\n        if (vocab && this.contextRaw['@vocab'] && iri.startsWith(this.contextRaw['@vocab'])) {\n            return iri.substr(this.contextRaw['@vocab'].length);\n        }\n        // Try @base compacting\n        if (!vocab && this.contextRaw['@base'] && iri.startsWith(this.contextRaw['@base'])) {\n            return iri.substr(this.contextRaw['@base'].length);\n        }\n        // Loop over all terms in the context\n        // This will try to prefix as short as possible.\n        // Once a fully compacted alias is found, return immediately, as we can not go any shorter.\n        const shortestPrefixing = { prefix: '', suffix: iri };\n        for (const key in this.contextRaw) {\n            const value = this.contextRaw[key];\n            if (value && !Util_1.Util.isPotentialKeyword(key)) {\n                const contextIri = Util_1.Util.getContextValueId(value);\n                if (iri.startsWith(contextIri)) {\n                    const suffix = iri.substr(contextIri.length);\n                    if (!suffix) {\n                        if (vocab) {\n                            // Immediately return on compacted alias\n                            return key;\n                        }\n                    }\n                    else if (suffix.length < shortestPrefixing.suffix.length) {\n                        // Overwrite the shortest prefix\n                        shortestPrefixing.prefix = key;\n                        shortestPrefixing.suffix = suffix;\n                    }\n                }\n            }\n        }\n        // Return the shortest prefix\n        if (shortestPrefixing.prefix) {\n            return shortestPrefixing.prefix + ':' + shortestPrefixing.suffix;\n        }\n        return iri;\n    }\n}\nexports.JsonLdContextNormalized = JsonLdContextNormalized;\n//# sourceMappingURL=JsonLdContextNormalized.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nclass Util {\n    /**\n     * Check if the given term is a valid compact IRI.\n     * Otherwise, it may be an IRI.\n     * @param {string} term A term.\n     * @return {boolean} If it is a compact IRI.\n     */\n    static isCompactIri(term) {\n        return term.indexOf(':') > 0 && !(term && term[0] === '#');\n    }\n    /**\n     * Get the prefix from the given term.\n     * @see https://json-ld.org/spec/latest/json-ld/#compact-iris\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {string} The prefix or null.\n     */\n    static getPrefix(term, context) {\n        // Do not consider relative IRIs starting with a hash as compact IRIs\n        if (term && term[0] === '#') {\n            return null;\n        }\n        const separatorPos = term.indexOf(':');\n        if (separatorPos >= 0) {\n            // Suffix can not begin with two slashes\n            if (term.length > separatorPos + 1\n                && term.charAt(separatorPos + 1) === '/'\n                && term.charAt(separatorPos + 2) === '/') {\n                return null;\n            }\n            const prefix = term.substr(0, separatorPos);\n            // Prefix can not be an underscore (this is a blank node)\n            if (prefix === '_') {\n                return null;\n            }\n            // Prefix must match a term in the active context\n            if (context[prefix]) {\n                return prefix;\n            }\n        }\n        return null;\n    }\n    /**\n     * From a given context entry value, get the string value, or the @id field.\n     * @param contextValue A value for a term in a context.\n     * @return {string} The id value, or null.\n     */\n    static getContextValueId(contextValue) {\n        if (contextValue === null || typeof contextValue === 'string') {\n            return contextValue;\n        }\n        const id = contextValue['@id'];\n        return id ? id : null;\n    }\n    /**\n     * Check if the given simple term definition (string-based value of a context term)\n     * should be considered a prefix.\n     * @param value A simple term definition value.\n     * @param options Options that define the way how expansion must be done.\n     */\n    static isSimpleTermDefinitionPrefix(value, options) {\n        return !Util.isPotentialKeyword(value)\n            && (value[0] === '_' || options.allowPrefixNonGenDelims || Util.isPrefixIriEndingWithGenDelim(value));\n    }\n    /**\n     * Check if the given keyword is of the keyword format \"@\"1*ALPHA.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is of the keyword format.\n     */\n    static isPotentialKeyword(keyword) {\n        return typeof keyword === 'string' && Util.KEYWORD_REGEX.test(keyword);\n    }\n    /**\n     * Check if the given prefix ends with a gen-delim character.\n     * @param {string} prefixIri A prefix IRI.\n     * @return {boolean} If the given prefix IRI is valid.\n     */\n    static isPrefixIriEndingWithGenDelim(prefixIri) {\n        return Util.ENDS_WITH_GEN_DELIM.test(prefixIri);\n    }\n    /**\n     * Check if the given context value can be a prefix value.\n     * @param value A context value.\n     * @return {boolean} If it can be a prefix value.\n     */\n    static isPrefixValue(value) {\n        return value && (typeof value === 'string' || (value && typeof value === 'object'));\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return Boolean(iri && Util.IRI_REGEX.test(iri));\n    }\n    /**\n     * Check if the given IRI is valid, this includes the possibility of being a relative IRI.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIriWeak(iri) {\n        return !!iri && iri[0] !== ':' && Util.IRI_REGEX_WEAK.test(iri);\n    }\n    /**\n     * Check if the given keyword is a defined according to the JSON-LD specification.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is valid.\n     */\n    static isValidKeyword(keyword) {\n        return Util.VALID_KEYWORDS[keyword];\n    }\n    /**\n     * Check if the given term is protected in the context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {string} key A context term.\n     * @return {boolean} If the given term has an @protected flag.\n     */\n    static isTermProtected(context, key) {\n        const value = context[key];\n        return !(typeof value === 'string') && value && value['@protected'];\n    }\n    /**\n     * Check if the given context has at least one protected term.\n     * @param context A context.\n     * @return If the context has a protected term.\n     */\n    static hasProtectedTerms(context) {\n        for (const key of Object.keys(context)) {\n            if (Util.isTermProtected(context, key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check if the given key is an internal reserved keyword.\n     * @param key A context key.\n     */\n    static isReservedInternalKeyword(key) {\n        return key.startsWith('@__');\n    }\n}\nexports.Util = Util;\n// Regex for valid IRIs\nUtil.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ \"<>{}|\\\\\\[\\]`#]*(#[^#]*)?$/;\n// Weaker regex for valid IRIs, this includes relative IRIs\nUtil.IRI_REGEX_WEAK = /(?::[^:])|\\//;\n// Regex for keyword form\nUtil.KEYWORD_REGEX = /^@[a-z]+$/i;\n// Regex to see if an IRI ends with a gen-delim character (see RFC 3986)\nUtil.ENDS_WITH_GEN_DELIM = /[:/?#\\[\\]@]$/;\n// Regex for language tags\nUtil.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;\n// Regex for base directions\nUtil.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;\n// All known valid JSON-LD keywords\n// @see https://www.w3.org/TR/json-ld11/#keywords\nUtil.VALID_KEYWORDS = {\n    '@base': true,\n    '@container': true,\n    '@context': true,\n    '@direction': true,\n    '@graph': true,\n    '@id': true,\n    '@import': true,\n    '@included': true,\n    '@index': true,\n    '@json': true,\n    '@language': true,\n    '@list': true,\n    '@nest': true,\n    '@none': true,\n    '@prefix': true,\n    '@propagate': true,\n    '@protected': true,\n    '@reverse': true,\n    '@set': true,\n    '@type': true,\n    '@value': true,\n    '@version': true,\n    '@vocab': true,\n};\n// Keys in the contexts that will not be expanded based on the base IRI\nUtil.EXPAND_KEYS_BLACKLIST = [\n    '@base',\n    '@vocab',\n    '@language',\n    '@version',\n    '@direction',\n];\n// Keys in the contexts that may not be aliased from\nUtil.ALIAS_DOMAIN_BLACKLIST = [\n    '@container',\n    '@graph',\n    '@id',\n    '@index',\n    '@list',\n    '@nest',\n    '@none',\n    '@prefix',\n    '@reverse',\n    '@set',\n    '@type',\n    '@value',\n    '@version',\n];\n// Keys in the contexts that may not be aliased to\nUtil.ALIAS_RANGE_BLACKLIST = [\n    '@context',\n    '@preserve',\n];\n// All valid @container values\nUtil.CONTAINERS = [\n    '@list',\n    '@set',\n    '@index',\n    '@language',\n    '@graph',\n    '@id',\n    '@type',\n];\n// All valid @container values under processing mode 1.0\nUtil.CONTAINERS_1_0 = [\n    '@list',\n    '@set',\n    '@index',\n];\n//# sourceMappingURL=Util.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/JsonLdParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdParser = void 0;\n// tslint:disable-next-line:no-var-requires\nconst Parser = require('jsonparse');\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst stream_1 = require(\"stream\");\nconst EntryHandlerArrayValue_1 = require(\"./entryhandler/EntryHandlerArrayValue\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\nconst EntryHandlerInvalidFallback_1 = require(\"./entryhandler/EntryHandlerInvalidFallback\");\nconst EntryHandlerPredicate_1 = require(\"./entryhandler/EntryHandlerPredicate\");\nconst EntryHandlerKeywordContext_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordContext\");\nconst EntryHandlerKeywordGraph_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordGraph\");\nconst EntryHandlerKeywordId_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordId\");\nconst EntryHandlerKeywordIncluded_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordIncluded\");\nconst EntryHandlerKeywordNest_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordNest\");\nconst EntryHandlerKeywordType_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordType\");\nconst EntryHandlerKeywordUnknownFallback_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordUnknownFallback\");\nconst EntryHandlerKeywordValue_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordValue\");\nconst ParsingContext_1 = require(\"./ParsingContext\");\nconst Util_1 = require(\"./Util\");\nconst http_link_header_1 = require(\"http-link-header\");\n/**\n * A stream transformer that parses JSON-LD (text) streams to an {@link RDF.Stream}.\n */\nclass JsonLdParser extends stream_1.Transform {\n    constructor(options) {\n        super({ readableObjectMode: true });\n        options = options || {};\n        this.options = options;\n        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));\n        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });\n        this.jsonParser = new Parser();\n        this.contextJobs = [];\n        this.typeJobs = [];\n        this.contextAwaitingJobs = [];\n        this.lastDepth = 0;\n        this.lastKeys = [];\n        this.lastOnValueJob = Promise.resolve();\n        this.attachJsonParserListeners();\n        this.on('end', () => {\n            if (typeof this.jsonParser.mode !== 'undefined') {\n                this.emit('error', new Error('Unclosed document'));\n            }\n        });\n    }\n    /**\n     * Construct a JsonLdParser from the given HTTP response.\n     *\n     * This will throw an error if no valid JSON response is received\n     * (application/ld+json, application/json, or something+json).\n     *\n     * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.\n     *\n     * This method is not responsible for handling redirects.\n     *\n     * @param baseIRI The URI of the received response.\n     * @param mediaType The received content type.\n     * @param headers Optional HTTP headers.\n     * @param options Optional parser options.\n     */\n    static fromHttpResponse(baseIRI, mediaType, headers, options) {\n        let context;\n        // Special cases when receiving something else than the JSON-LD media type\n        if (mediaType !== 'application/ld+json') {\n            // Only accept JSON or JSON extension types\n            if (mediaType !== 'application/json' && !mediaType.endsWith('+json')) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n            // We need exactly one JSON-LD context in the link header\n            if (headers && headers.has('Link')) {\n                headers.forEach((value, key) => {\n                    if (key === 'link') {\n                        const linkHeader = http_link_header_1.parse(value);\n                        for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {\n                            if (context) {\n                                throw new jsonld_context_parser_1.ErrorCoded('Multiple JSON-LD context link headers were found on ' + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);\n                            }\n                            context = link.uri;\n                        }\n                    }\n                });\n            }\n            if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        // Check if the streaming profile is present\n        let streamingProfile;\n        if (headers && headers.has('Content-Type')) {\n            const contentType = headers.get('Content-Type');\n            const match = /; *profile=([^\"]*)/.exec(contentType);\n            if (match && match[1] === 'http://www.w3.org/ns/json-ld#streaming') {\n                streamingProfile = true;\n            }\n        }\n        return new JsonLdParser(Object.assign({ baseIRI,\n            context,\n            streamingProfile }, options ? options : {}));\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new JsonLdParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        this.jsonParser.write(chunk);\n        this.lastOnValueJob\n            .then(() => callback(), (error) => callback(error));\n    }\n    /**\n     * Start a new job for parsing the given value.\n     *\n     * This will let the first valid {@link IEntryHandler} handle the entry.\n     *\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        let flushStacks = true;\n        // When we go up the stack, emit all unidentified values\n        // We need to do this before the new job, because the new job may require determined values from the flushed jobs.\n        if (lastDepthCheck && depth < this.lastDepth) {\n            // Check if we had any RDF lists that need to be terminated with an rdf:nil\n            const listPointer = this.parsingContext.listPointerStack[this.lastDepth];\n            if (listPointer) {\n                // Terminate the list if the had at least one value\n                if (listPointer.value) {\n                    this.emit('data', this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));\n                }\n                // Add the list id to the id stack, so it can be used higher up in the stack\n                listPointer.listId.listHead = true;\n                this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];\n                this.parsingContext.listPointerStack.splice(this.lastDepth, 1);\n            }\n            // Flush the buffer for lastDepth\n            // If the parent key is a special type of container, postpone flushing until that parent is handled.\n            if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {\n                this.parsingContext.pendingContainerFlushBuffers\n                    .push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });\n                flushStacks = false;\n            }\n            else {\n                await this.flushBuffer(this.lastDepth, this.lastKeys);\n            }\n        }\n        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);\n        const parentKey = await this.util.unaliasKeywordParent(keys, depth);\n        this.parsingContext.emittedStack[depth] = true;\n        let handleKey = true;\n        // Keywords inside @reverse is not allowed apart from @context\n        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === '@reverse' && key !== '@context') {\n            this.emit('error', new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));\n        }\n        // Skip further processing if one of the parent nodes are invalid.\n        // We use the validationStack to reuse validation results that were produced before with common key stacks.\n        let inProperty = false;\n        if (this.parsingContext.validationStack.length > 1) {\n            inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;\n        }\n        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys.length - 1; i++) {\n            const validationResult = this.parsingContext.validationStack[i]\n                || (this.parsingContext.validationStack[i] = await this.validateKey(keys.slice(0, i + 1), i, inProperty));\n            if (!validationResult.valid) {\n                this.parsingContext.emittedStack[depth] = false;\n                handleKey = false;\n                break;\n            }\n            else if (!inProperty && validationResult.property) {\n                inProperty = true;\n            }\n        }\n        // Skip further processing if this node is part of a literal\n        if (this.util.isLiteral(depth)) {\n            handleKey = false;\n        }\n        // Get handler\n        if (handleKey) {\n            for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n                const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);\n                if (testResult) {\n                    // Pass processing over to the handler\n                    await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);\n                    // Flag that this depth is processed\n                    if (entryHandler.isStackProcessor()) {\n                        this.parsingContext.processingStack[depth] = true;\n                    }\n                    break;\n                }\n            }\n        }\n        // Validate value indexes on the root.\n        if (depth === 0 && Array.isArray(value)) {\n            await this.util.validateValueIndexes(value);\n        }\n        // When we go up the stack, flush the old stack\n        if (flushStacks && depth < this.lastDepth) {\n            // Reset our stacks\n            this.flushStacks(this.lastDepth);\n        }\n        this.lastDepth = depth;\n        this.lastKeys = keys;\n        // Clear the keyword cache at this depth, and everything underneath.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);\n    }\n    /**\n     * Flush the processing stacks at the given depth.\n     * @param {number} depth A depth.\n     */\n    flushStacks(depth) {\n        this.parsingContext.processingStack.splice(depth, 1);\n        this.parsingContext.processingType.splice(depth, 1);\n        this.parsingContext.emittedStack.splice(depth, 1);\n        this.parsingContext.idStack.splice(depth, 1);\n        this.parsingContext.graphStack.splice(depth + 1, 1);\n        this.parsingContext.graphContainerTermStack.splice(depth, 1);\n        this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        this.parsingContext.validationStack.splice(depth - 1, 2);\n        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);\n        // TODO: just like the literal stack, splice all other stack until the end as well?\n    }\n    /**\n     * Flush buffers for the given depth.\n     *\n     * This should be called after the last entry at a given depth was processed.\n     *\n     * @param {number} depth A depth.\n     * @param {any[]} keys A stack of keys.\n     * @return {Promise<void>} A promise resolving if flushing is done.\n     */\n    async flushBuffer(depth, keys) {\n        let subjects = this.parsingContext.idStack[depth];\n        if (!subjects) {\n            subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];\n        }\n        // Flush values at this level\n        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];\n        if (valueBuffer) {\n            for (const subject of subjects) {\n                const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);\n                const graphs = (this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0)\n                    ? this.parsingContext.idStack[depth - depthOffsetGraph - 1]\n                    : [await this.util.getGraphContainerValue(keys, depth)];\n                if (graphs) {\n                    for (const graph of graphs) {\n                        // Flush values to stream if the graph @id is known\n                        this.parsingContext.emittedStack[depth] = true;\n                        for (const bufferedValue of valueBuffer) {\n                            if (bufferedValue.reverse) {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.object, bufferedValue.predicate, subject, graph));\n                            }\n                            else {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(subject, bufferedValue.predicate, bufferedValue.object, graph));\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Place the values in the graphs buffer if the graph @id is not yet known\n                    const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);\n                    for (const bufferedValue of valueBuffer) {\n                        if (bufferedValue.reverse) {\n                            subGraphBuffer.push({\n                                object: subject,\n                                predicate: bufferedValue.predicate,\n                                subject: bufferedValue.object,\n                            });\n                        }\n                        else {\n                            subGraphBuffer.push({\n                                object: bufferedValue.object,\n                                predicate: bufferedValue.predicate,\n                                subject,\n                            });\n                        }\n                    }\n                }\n            }\n            this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);\n            this.parsingContext.literalStack.splice(depth, 1);\n            this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        }\n        // Flush graphs at this level\n        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];\n        if (graphBuffer) {\n            for (const subject of subjects) {\n                // A @graph statement at the root without @id relates to the default graph,\n                // unless there are top-level properties,\n                // others relate to blank nodes.\n                const graph = depth === 1 && subject.termType === 'BlankNode'\n                    && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;\n                this.parsingContext.emittedStack[depth] = true;\n                for (const bufferedValue of graphBuffer) {\n                    this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));\n                }\n            }\n            this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);\n        }\n    }\n    /**\n     * Check if at least one {@link IEntryHandler} validates the entry to true.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth A depth.\n     * @param {boolean} inProperty If the current depth is part of a valid property node.\n     * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.\n     */\n    async validateKey(keys, depth, inProperty) {\n        for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n            if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {\n                return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };\n            }\n        }\n        return { valid: false, property: false };\n    }\n    /**\n     * Attach all required listeners to the JSON parser.\n     *\n     * This should only be called once.\n     */\n    attachJsonParserListeners() {\n        // Listen to json parser events\n        this.jsonParser.onValue = (value) => {\n            const depth = this.jsonParser.stack.length;\n            const keys = (new Array(depth + 1).fill(0)).map((v, i) => {\n                return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;\n            });\n            if (!this.isParsingContextInner(depth)) { // Don't parse inner nodes inside @context\n                const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);\n                if (!this.parsingContext.streamingProfile\n                    && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {\n                    // If an out-of-order context is allowed,\n                    // we have to buffer everything.\n                    // We store jobs for @context's and @type's separately,\n                    // because at the end, we have to process them first.\n                    // We also handle @type because these *could* introduce a type-scoped context.\n                    if (keys[depth] === '@context') {\n                        let jobs = this.contextJobs[depth];\n                        if (!jobs) {\n                            jobs = this.contextJobs[depth] = [];\n                        }\n                        jobs.push(valueJobCb);\n                    }\n                    else if (keys[depth] === '@type'\n                        || typeof keys[depth] === 'number' && keys[depth - 1] === '@type') { // Also capture @type with array values\n                        // Remove @type from keys, because we want it to apply to parent later on\n                        this.typeJobs.push({ job: valueJobCb, keys: keys.slice(0, keys.length - 1) });\n                    }\n                    else {\n                        this.contextAwaitingJobs.push({ job: valueJobCb, keys });\n                    }\n                }\n                else {\n                    // Make sure that our value jobs are chained synchronously\n                    this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);\n                }\n                // Execute all buffered jobs on deeper levels\n                if (!this.parsingContext.streamingProfile && depth === 0) {\n                    this.lastOnValueJob = this.lastOnValueJob\n                        .then(() => this.executeBufferedJobs());\n                }\n            }\n        };\n        this.jsonParser.onError = (error) => {\n            this.emit('error', error);\n        };\n    }\n    /**\n     * Check if the parser is currently parsing an element that is part of an @context entry.\n     * @param {number} depth A depth.\n     * @return {boolean} A boolean.\n     */\n    isParsingContextInner(depth) {\n        for (let i = depth; i > 0; i--) {\n            if (this.jsonParser.stack[i - 1].key === '@context') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute all buffered jobs.\n     * @return {Promise<void>} A promise resolving if all jobs are finished.\n     */\n    async executeBufferedJobs() {\n        // Handle context jobs\n        for (const jobs of this.contextJobs) {\n            if (jobs) {\n                for (const job of jobs) {\n                    await job();\n                }\n            }\n        }\n        // Clear the keyword cache.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(0);\n        // Handle non-context jobs\n        for (const job of this.contextAwaitingJobs) {\n            // Check if we have a type (with possible type-scoped context) that should be handled before.\n            // We check all possible parent nodes for the current job, from root to leaves.\n            if (this.typeJobs.length > 0) {\n                // First collect all applicable type jobs\n                const applicableTypeJobs = [];\n                const applicableTypeJobIds = [];\n                for (let i = 0; i < this.typeJobs.length; i++) {\n                    const typeJob = this.typeJobs[i];\n                    if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {\n                        applicableTypeJobs.push(typeJob);\n                        applicableTypeJobIds.push(i);\n                    }\n                }\n                // Next, sort the jobs from short to long key length (to ensure types higher up in the tree to be handled first)\n                const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);\n                // Finally, execute the jobs in order\n                for (const typeJob of sortedTypeJobs) {\n                    await typeJob.job();\n                }\n                // Remove the executed type jobs\n                // Sort first, so we can efficiently splice\n                const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();\n                for (const jobId of sortedApplicableTypeJobIds) {\n                    this.typeJobs.splice(jobId, 1);\n                }\n            }\n            await job.job();\n        }\n    }\n}\nexports.JsonLdParser = JsonLdParser;\nJsonLdParser.DEFAULT_PROCESSING_MODE = '1.1';\nJsonLdParser.ENTRY_HANDLERS = [\n    new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),\n    new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),\n    new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),\n    new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),\n    new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),\n    new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),\n    new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),\n    new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),\n    new EntryHandlerContainer_1.EntryHandlerContainer(),\n    new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),\n    new EntryHandlerPredicate_1.EntryHandlerPredicate(),\n    new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback(),\n];\n//# sourceMappingURL=JsonLdParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst ErrorCoded_1 = require(\"jsonld-context-parser/lib/ErrorCoded\");\nconst ContextTree_1 = require(\"./ContextTree\");\nconst JsonLdParser_1 = require(\"./JsonLdParser\");\n/**\n * Data holder for parsing information.\n */\nclass ParsingContext {\n    constructor(options) {\n        // Initialize settings\n        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });\n        this.streamingProfile = !!options.streamingProfile;\n        this.baseIRI = options.baseIRI;\n        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;\n        this.allowSubjectList = !!options.allowSubjectList;\n        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;\n        this.strictValues = !!options.strictValues;\n        this.validateValueIndexes = !!options.validateValueIndexes;\n        this.defaultGraph = options.defaultGraph;\n        this.rdfDirection = options.rdfDirection;\n        this.normalizeLanguageTags = options.normalizeLanguageTags;\n        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;\n        this.topLevelProperties = false;\n        this.activeProcessingMode = parseFloat(this.processingMode);\n        // Initialize stacks\n        this.processingStack = [];\n        this.processingType = [];\n        this.emittedStack = [];\n        this.idStack = [];\n        this.graphStack = [];\n        this.graphContainerTermStack = [];\n        this.listPointerStack = [];\n        this.contextTree = new ContextTree_1.ContextTree();\n        this.literalStack = [];\n        this.validationStack = [];\n        this.unaliasedKeywordCacheStack = [];\n        this.jsonLiteralStack = [];\n        this.unidentifiedValuesBuffer = [];\n        this.unidentifiedGraphsBuffer = [];\n        this.pendingContainerFlushBuffers = [];\n        this.parser = options.parser;\n        if (options.context) {\n            this.rootContext = this.parseContext(options.context);\n            this.rootContext.then((context) => this.validateContext(context));\n        }\n        else {\n            this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { '@base': this.baseIRI, '@__baseDocument': true } : {}));\n        }\n    }\n    /**\n     * Parse the given context with the configured options.\n     * @param {JsonLdContext} context A context to parse.\n     * @param {JsonLdContextNormalized} parentContext An optional parent context.\n     * @param {boolean} ignoreProtection If @protected term checks should be ignored.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.\n     */\n    async parseContext(context, parentContext, ignoreProtection) {\n        return this.contextParser.parse(context, {\n            baseIRI: this.baseIRI,\n            ignoreProtection,\n            normalizeLanguageTags: this.normalizeLanguageTags,\n            parentContext,\n            processingMode: this.activeProcessingMode,\n        });\n    }\n    /**\n     * Check if the given context is valid.\n     * If not, an error will be thrown.\n     * @param {JsonLdContextNormalized} context A context.\n     */\n    validateContext(context) {\n        const activeVersion = context.getContextRaw()['@version'];\n        if (activeVersion) {\n            if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);\n            }\n            else {\n                if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {\n                    throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                }\n                this.activeProcessingMode = activeVersion;\n            }\n        }\n    }\n    /**\n     * Get the context at the given path.\n     * @param {keys} keys The path of keys to get the context at.\n     * @param {number} offset The path offset, defaults to 1.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.\n     */\n    async getContext(keys, offset = 1) {\n        const keysOriginal = keys;\n        // Ignore array keys at the end\n        while (typeof keys[keys.length - 1] === 'number') {\n            keys = keys.slice(0, keys.length - 1);\n        }\n        // Handle offset on keys\n        if (offset) {\n            keys = keys.slice(0, -offset);\n        }\n        // Determine the closest context\n        const contextData = await this.getContextPropagationAware(keys);\n        const context = contextData.context;\n        // Process property-scoped contexts (high-to-low)\n        let contextRaw = context.getContextRaw();\n        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {\n            const key = keysOriginal[i];\n            const contextKeyEntry = contextRaw[key];\n            if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n                const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();\n                const propagate = !(key in scopedContext)\n                    || scopedContext[key]['@context']['@propagate']; // Propagation is true by default\n                if (propagate !== false || i === keysOriginal.length - 1 - offset) {\n                    contextRaw = scopedContext;\n                    // Clean up final context\n                    delete contextRaw['@propagate'];\n                    contextRaw[key] = Object.assign({}, contextRaw[key]);\n                    if ('@id' in contextKeyEntry) {\n                        contextRaw[key]['@id'] = contextKeyEntry['@id'];\n                    }\n                    delete contextRaw[key]['@context'];\n                    if (propagate !== false) {\n                        this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));\n                    }\n                }\n            }\n        }\n        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);\n    }\n    /**\n     * Get the context at the given path.\n     * Non-propagating contexts will be skipped,\n     * unless the context at that exact depth is retrieved.\n     *\n     * This ONLY takes into account context propagation logic,\n     * so this should usually not be called directly,\n     * call {@link #getContext} instead.\n     *\n     * @param keys The path of keys to get the context at.\n     * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.\n     */\n    async getContextPropagationAware(keys) {\n        const originalDepth = keys.length;\n        let contextData = null;\n        let hasApplicablePropertyScopedContext;\n        do {\n            hasApplicablePropertyScopedContext = false;\n            if (contextData && '@__propagateFallback' in contextData.context.getContextRaw()) {\n                // If a propagation fallback context has been set,\n                // fallback to that context and retry for the same depth.\n                contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()['@__propagateFallback']);\n            }\n            else {\n                if (contextData) {\n                    // If we had a previous iteration, jump to the parent of context depth.\n                    // We must do this because once we get here, last context had propagation disabled,\n                    // so we check its first parent instead.\n                    keys = keys.slice(0, contextData.depth - 1);\n                }\n                contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };\n            }\n            // Allow non-propagating contexts to propagate one level deeper\n            // if it defines a property-scoped context that is applicable for the current key.\n            // @see https://w3c.github.io/json-ld-api/tests/toRdf-manifest#tc012\n            const lastKey = keys[keys.length - 1];\n            if (lastKey in contextData.context.getContextRaw()) {\n                const lastKeyValue = contextData.context.getContextRaw()[lastKey];\n                if (lastKeyValue && typeof lastKeyValue === 'object' && '@context' in lastKeyValue) {\n                    hasApplicablePropertyScopedContext = true;\n                }\n            }\n        } while (contextData.depth > 0 // Root context has a special case\n            && contextData.context.getContextRaw()['@propagate'] === false // Stop loop if propagation is true\n            && contextData.depth !== originalDepth // Stop loop if requesting exact depth of non-propagating\n            && !hasApplicablePropertyScopedContext);\n        // Special case for root context that does not allow propagation.\n        // Fallback to empty context in that case.\n        if (contextData.depth === 0\n            && contextData.context.getContextRaw()['@propagate'] === false\n            && contextData.depth !== originalDepth) {\n            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});\n        }\n        return contextData;\n    }\n    /**\n     * Start a new job for parsing the given value.\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);\n    }\n    /**\n     * Flush the pending container flush buffers\n     * @return {boolean} If any pending buffers were flushed.\n     */\n    async handlePendingContainerFlushBuffers() {\n        if (this.pendingContainerFlushBuffers.length > 0) {\n            for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {\n                await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);\n                this.parser.flushStacks(pendingFlushBuffer.depth);\n            }\n            this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Emit the given quad into the output stream.\n     * @param {number} depth The depth the quad was generated at.\n     * @param {Quad} quad A quad to emit.\n     */\n    emitQuad(depth, quad) {\n        if (depth === 1) {\n            this.topLevelProperties = true;\n        }\n        this.parser.push(quad);\n    }\n    /**\n     * Emit the given error into the output stream.\n     * @param {Error} error An error to emit.\n     */\n    emitError(error) {\n        this.parser.emit('error', error);\n    }\n    /**\n     * Emit the given context into the output stream under the 'context' event.\n     * @param {JsonLdContext} context A context to emit.\n     */\n    emitContext(context) {\n        this.parser.emit('context', context);\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.\n     */\n    getUnidentifiedValueBufferSafe(depth) {\n        let buffer = this.unidentifiedValuesBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedValuesBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.\n     */\n    getUnidentifiedGraphBufferSafe(depth) {\n        let buffer = this.unidentifiedGraphsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedGraphsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * @return IExpandOptions The expand options for the active processing mode.\n     */\n    getExpandOptions() {\n        return ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];\n    }\n    /**\n     * Shift the stack at the given offset to the given depth.\n     *\n     * This will override anything in the stack at `depth`,\n     * and this will remove anything at `depth + depthOffset`\n     *\n     * @param depth The target depth.\n     * @param depthOffset The origin depth, relative to `depth`.\n     */\n    shiftStack(depth, depthOffset) {\n        // Copy the id stack value up one level so that the next job can access the id.\n        const deeperIdStack = this.idStack[depth + depthOffset];\n        if (deeperIdStack) {\n            this.idStack[depth] = deeperIdStack;\n            this.emittedStack[depth] = true;\n            delete this.idStack[depth + depthOffset];\n        }\n        // Shorten key stack\n        if (this.pendingContainerFlushBuffers.length) {\n            for (const buffer of this.pendingContainerFlushBuffers) {\n                if (buffer.depth >= depth + depthOffset) {\n                    buffer.depth -= depthOffset;\n                    buffer.keys.splice(depth, depthOffset);\n                }\n            }\n        }\n        // Splice stacks\n        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {\n            this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];\n            delete this.unidentifiedValuesBuffer[depth + depthOffset];\n        }\n        // TODO: also do the same for other stacks\n    }\n}\nexports.ParsingContext = ParsingContext;\nParsingContext.EXPAND_OPTIONS = {\n    1.0: {\n        allowPrefixForcing: false,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: false,\n    },\n    1.1: {\n        allowPrefixForcing: true,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: true,\n    },\n};\n//# sourceMappingURL=ParsingContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Utility functions and methods.\n */\nclass Util {\n    constructor(options) {\n        this.parsingContext = options.parsingContext;\n        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();\n        this.rdfFirst = this.dataFactory.namedNode(Util.RDF + 'first');\n        this.rdfRest = this.dataFactory.namedNode(Util.RDF + 'rest');\n        this.rdfNil = this.dataFactory.namedNode(Util.RDF + 'nil');\n        this.rdfType = this.dataFactory.namedNode(Util.RDF + 'type');\n        this.rdfJson = this.dataFactory.namedNode(Util.RDF + 'JSON');\n    }\n    /**\n     * Helper function to get the value of a context entry,\n     * or fallback to a certain value.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} contextKey A pre-defined JSON-LD key in context entries.\n     * @param {string} key A context entry key.\n     * @param {string} fallback A fallback value for when the given contextKey\n     *                          could not be found in the value with the given key.\n     * @return {string} The value of the given contextKey in the entry behind key in the given context,\n     *                  or the given fallback value.\n     */\n    static getContextValue(context, contextKey, key, fallback) {\n        const entry = context.getContextRaw()[key];\n        if (!entry) {\n            return fallback;\n        }\n        const type = entry[contextKey];\n        return type === undefined ? fallback : type;\n    }\n    /**\n     * Get the container type of the given key in the context.\n     *\n     * Should any context-scoping bugs should occur related to this in the future,\n     * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).\n     * This is because containers act 2 levels deep.\n     *\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The container type.\n     */\n    static getContextValueContainer(context, key) {\n        return Util.getContextValue(context, '@container', key, { '@set': true });\n    }\n    /**\n     * Get the value type of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueType(context, key) {\n        const valueType = Util.getContextValue(context, '@type', key, null);\n        if (valueType === '@none') {\n            return null;\n        }\n        return valueType;\n    }\n    /**\n     * Get the language of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueLanguage(context, key) {\n        return Util.getContextValue(context, '@language', key, context.getContextRaw()['@language'] || null);\n    }\n    /**\n     * Get the direction of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueDirection(context, key) {\n        return Util.getContextValue(context, '@direction', key, context.getContextRaw()['@direction'] || null);\n    }\n    /**\n     * Check if the given key in the context is a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {boolean} If the context value has a @reverse key.\n     */\n    static isContextValueReverse(context, key) {\n        return !!Util.getContextValue(context, '@reverse', key, null);\n    }\n    /**\n     * Get the @index of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The index.\n     */\n    static getContextValueIndex(context, key) {\n        return Util.getContextValue(context, '@index', key, context.getContextRaw()['@index'] || null);\n    }\n    /**\n     * Check if the given key refers to a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The property key.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property must be reversed.\n     */\n    static isPropertyReverse(context, key, parentKey) {\n        // '!==' is needed because reversed properties in a @reverse container should cancel each other out.\n        return parentKey === '@reverse' !== Util.isContextValueReverse(context, key);\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);\n    }\n    /**\n     * Check if the given first array (needle) is a prefix of the given second array (haystack).\n     * @param needle An array to check if it is a prefix.\n     * @param haystack An array to look in.\n     */\n    static isPrefixArray(needle, haystack) {\n        if (needle.length > haystack.length) {\n            return false;\n        }\n        for (let i = 0; i < needle.length; i++) {\n            if (needle[i] !== haystack[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Make sure that @id-@index pairs are equal over all array values.\n     * Reject otherwise.\n     * @param {any[]} value An array value.\n     * @return {Promise<void>} A promise rejecting if conflicts are present.\n     */\n    async validateValueIndexes(value) {\n        if (this.parsingContext.validateValueIndexes) {\n            const indexHashes = {};\n            for (const entry of value) {\n                if (entry && typeof entry === 'object') {\n                    const id = entry['@id'];\n                    const index = entry['@index'];\n                    if (id && index) {\n                        const existingIndexValue = indexHashes[id];\n                        if (existingIndexValue && existingIndexValue !== index) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);\n                        }\n                        indexHashes[id] = index;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert a given JSON value to an RDF term.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param value A JSON value.\n     * @param {number} depth The depth the value is at.\n     * @param {string[]} keys The path of keys.\n     * @return {Promise<RDF.Term[]>} An RDF term array.\n     */\n    async valueToTerm(context, key, value, depth, keys) {\n        // Skip further processing if we have an @type: @json\n        if (Util.getContextValueType(context, key) === '@json') {\n            return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];\n        }\n        const type = typeof value;\n        switch (type) {\n            case 'object':\n                // Skip if we have a null or undefined object\n                if (value === null || value === undefined) {\n                    return [];\n                }\n                // Special case for arrays\n                if (Array.isArray(value)) {\n                    // We handle arrays at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty context-based lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if ('@list' in Util.getContextValueContainer(context, key)) {\n                        if (value.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    await this.validateValueIndexes(value);\n                    return [];\n                }\n                // Handle property-scoped contexts\n                context = await this.getContextSelfOrPropertyScoped(context, key);\n                // Handle local context in the value\n                if ('@context' in value) {\n                    context = await this.parsingContext.parseContext(value['@context'], (await this.parsingContext.getContext(keys, 0)).getContextRaw());\n                }\n                // In all other cases, we have a hash\n                value = await this.unaliasKeywords(value, keys, depth, context); // Un-alias potential keywords in this hash\n                if ('@value' in value) {\n                    let val;\n                    let valueLanguage;\n                    let valueDirection;\n                    let valueType;\n                    let valueIndex; // We don't use the index, but we need to check its type for spec-compliance\n                    for (key in value) {\n                        const subValue = value[key];\n                        switch (key) {\n                            case '@value':\n                                val = subValue;\n                                break;\n                            case '@language':\n                                valueLanguage = subValue;\n                                break;\n                            case '@direction':\n                                valueDirection = subValue;\n                                break;\n                            case '@type':\n                                valueType = subValue;\n                                break;\n                            case '@index':\n                                valueIndex = subValue;\n                                break;\n                            default:\n                                throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                    }\n                    // Skip further processing if we have an @type: @json\n                    if (await this.unaliasKeyword(valueType, keys, depth, true, context) === '@json') {\n                        return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];\n                    }\n                    // Validate @value\n                    if (val === null) {\n                        return [];\n                    }\n                    if (typeof val === 'object') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);\n                    }\n                    // Validate @index\n                    if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== 'string') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);\n                    }\n                    // Validate @language and @direction\n                    if (valueLanguage) {\n                        if (typeof val !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {\n                            return [];\n                        }\n                        // Language tags are always normalized to lowercase in 1.0.\n                        if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1.0) {\n                            valueLanguage = valueLanguage.toLowerCase();\n                        }\n                    }\n                    if (valueDirection) {\n                        if (typeof val !== 'string') {\n                            throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {\n                            return [];\n                        }\n                    }\n                    // Check @language and @direction\n                    if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON\n                                .stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueLanguage) { // Check @language\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return [this.dataFactory.literal(val, valueLanguage)];\n                    }\n                    else if (valueDirection && this.parsingContext.rdfDirection) { // Check @direction\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueType) { // Validate @type\n                        if (typeof valueType !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        const typeTerm = this.createVocabOrBaseTerm(context, valueType);\n                        if (!typeTerm) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        if (typeTerm.termType !== 'NamedNode') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        return [this.dataFactory.literal(val, typeTerm)];\n                    }\n                    // We don't pass the context, because context-based things like @language should be ignored\n                    return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);\n                }\n                else if ('@set' in value) {\n                    // No other entries are allow in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    // No need to do anything here, this is handled at the deeper level.\n                    return [];\n                }\n                else if ('@list' in value) {\n                    // No other entries are allowed in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    const listValue = value[\"@list\"];\n                    // We handle lists at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty anonymous lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if (Array.isArray(listValue)) {\n                        if (listValue.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    else {\n                        // We only have a single list element here, so emit this directly as single element\n                        return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));\n                    }\n                }\n                else if ('@reverse' in value && typeof value['@reverse'] === 'boolean') {\n                    // We handle reverse properties at value level so we can emit earlier,\n                    // so this is handled already when we get here.\n                    return [];\n                }\n                else if ('@graph' in Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {\n                    // We are processing a graph container\n                    const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];\n                    return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];\n                }\n                else if (\"@id\" in value) {\n                    // Use deeper context if the value node contains other properties next to @id.\n                    if (Object.keys(value).length > 1) {\n                        context = await this.parsingContext.getContext(keys, 0);\n                    }\n                    // Handle local context in the value\n                    if ('@context' in value) {\n                        context = await this.parsingContext.parseContext(value['@context'], context.getContextRaw());\n                    }\n                    if (value[\"@type\"] === '@vocab') {\n                        return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value[\"@id\"]));\n                    }\n                    else {\n                        return this.nullableTermToArray(this.resourceToTerm(context, value[\"@id\"]));\n                    }\n                }\n                else {\n                    // Only make a blank node if at least one triple was emitted at the value's level.\n                    if (this.parsingContext.emittedStack[depth + 1]\n                        || (value && typeof value === 'object' && Object.keys(value).length === 0)) {\n                        return (this.parsingContext.idStack[depth + 1]\n                            || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]));\n                    }\n                    else {\n                        return [];\n                    }\n                }\n            case 'string':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));\n            case 'boolean':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(Util.XSD_BOOLEAN)));\n            case 'number':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? Util.XSD_INTEGER : Util.XSD_DOUBLE)));\n            default:\n                this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));\n                return [];\n        }\n    }\n    /**\n     * If the context defines a property-scoped context for the given key,\n     * that context will be returned.\n     * Otherwise, the given context will be returned as-is.\n     *\n     * This should be used for valueToTerm cases that are not objects.\n     * @param context A context.\n     * @param key A JSON key.\n     */\n    async getContextSelfOrPropertyScoped(context, key) {\n        const contextKeyEntry = context.getContextRaw()[key];\n        if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n            context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);\n        }\n        return context;\n    }\n    /**\n     * If the given term is null, return an empty array, otherwise return an array with the single given term.\n     * @param term A term.\n     */\n    nullableTermToArray(term) {\n        return term ? [term] : [];\n    }\n    /**\n     * Convert a given JSON key to an RDF predicate term,\n     * based on @vocab.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node.\n     */\n    predicateToTerm(context, key) {\n        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());\n        // Immediately return if the predicate was disabled in the context\n        if (!expanded) {\n            return null;\n        }\n        // Check if the predicate is a blank node\n        if (expanded[0] === '_' && expanded[1] === ':') {\n            if (this.parsingContext.produceGeneralizedRdf) {\n                return this.dataFactory.blankNode(expanded.substr(2));\n            }\n            else {\n                return null;\n            }\n        }\n        // Check if the predicate is a valid IRI\n        if (Util.isValidIri(expanded)) {\n            return this.dataFactory.namedNode(expanded);\n        }\n        else {\n            if (expanded && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term or blank node,\n     * based on @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    resourceToTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());\n        if (!Util.isValidIri(iri)) {\n            if (iri && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(iri);\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term.\n     * It will do this based on the @vocab,\n     * and fallback to @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    createVocabOrBaseTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const expandOptions = this.parsingContext.getExpandOptions();\n        let expanded = context.expandTerm(key, true, expandOptions);\n        if (expanded === key) {\n            expanded = context.expandTerm(key, false, expandOptions);\n        }\n        if (!Util.isValidIri(expanded)) {\n            if (expanded && this.parsingContext.strictValues && !expanded.startsWith('@')) {\n                this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(expanded);\n    }\n    /**\n     * Ensure that the given value becomes a string.\n     * @param {string | number} value A string or number.\n     * @param {NamedNode} datatype The intended datatype.\n     * @return {string} The returned string.\n     */\n    intToString(value, datatype) {\n        if (typeof value === 'number') {\n            if (Number.isFinite(value)) {\n                const isInteger = value % 1 === 0;\n                if (isInteger && (!datatype || datatype.value !== Util.XSD_DOUBLE)) {\n                    return Number(value).toString();\n                }\n                else {\n                    return value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n                }\n            }\n            else {\n                return value > 0 ? 'INF' : '-INF';\n            }\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Convert a given JSON string value to an RDF term.\n     * @param {number} depth The current stack depth.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param {string} value A JSON value.\n     * @param {NamedNode} defaultDatatype The default datatype for the given value.\n     * @return {RDF.Term} An RDF term or null.\n     */\n    stringValueToTerm(depth, context, key, value, defaultDatatype) {\n        // Check the datatype from the context\n        const contextType = Util.getContextValueType(context, key);\n        if (contextType) {\n            if (contextType === '@id') {\n                if (!defaultDatatype) {\n                    return this.resourceToTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else if (contextType === '@vocab') {\n                if (!defaultDatatype) {\n                    return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else {\n                defaultDatatype = this.dataFactory.namedNode(contextType);\n            }\n        }\n        // If we don't find such a datatype, check the language from the context\n        if (!defaultDatatype) {\n            const contextLanguage = Util.getContextValueLanguage(context, key);\n            const contextDirection = Util.getContextValueDirection(context, key);\n            if (contextDirection && this.parsingContext.rdfDirection) {\n                return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);\n            }\n            else {\n                return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);\n            }\n        }\n        // If all else fails, make a literal based on the default content type\n        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);\n    }\n    /**\n     * Create a literal for the given value with the given language and direction.\n     * Auxiliary quads may be emitted.\n     * @param {number} depth The current stack depth.\n     * @param {string} value A string value.\n     * @param {string} language A language tag.\n     * @param {string} direction A direction.\n     * @return {Term} An RDF term.\n     */\n    createLanguageDirectionLiteral(depth, value, language, direction) {\n        if (this.parsingContext.rdfDirection === 'i18n-datatype') {\n            // Create a datatyped literal, by encoding the language and direction into https://www.w3.org/ns/i18n#.\n            if (!language) {\n                language = '';\n            }\n            return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));\n        }\n        else {\n            // Reify the literal.\n            const valueNode = this.dataFactory.blankNode();\n            const graph = this.getDefaultGraph();\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'value'), this.dataFactory.literal(value), graph));\n            if (language) {\n                this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'language'), this.dataFactory.literal(language), graph));\n            }\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'direction'), this.dataFactory.literal(direction), graph));\n            return valueNode;\n        }\n    }\n    /**\n     * Stringify the given JSON object to a canonical JSON string.\n     * @param value Any valid JSON value.\n     * @return {string} A canonical JSON string.\n     */\n    valueToJsonString(value) {\n        return canonicalizeJson(value);\n    }\n    /**\n     * If the key is not a keyword, try to check if it is an alias for a keyword,\n     * and if so, un-alias it.\n     * @param {string} key A key, can be falsy.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth to\n     * @param {boolean} disableCache If the cache should be disabled\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<string>} A promise resolving to the key itself, or another key.\n     */\n    async unaliasKeyword(key, keys, depth, disableCache, context) {\n        // Numbers can not be an alias\n        if (Number.isInteger(key)) {\n            return key;\n        }\n        // Try to grab from cache if it was already un-aliased before.\n        if (!disableCache) {\n            const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];\n            if (cachedUnaliasedKeyword) {\n                return cachedUnaliasedKeyword;\n            }\n        }\n        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            context = context || await this.parsingContext.getContext(keys);\n            let unliased = context.getContextRaw()[key];\n            if (unliased && typeof unliased === 'object') {\n                unliased = unliased['@id'];\n            }\n            if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {\n                key = unliased;\n            }\n        }\n        return disableCache ? key : (this.parsingContext.unaliasedKeywordCacheStack[depth] = key);\n    }\n    /**\n     * Unalias the keyword of the parent.\n     * This adds a safety check if no parent exist.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<any>} A promise resolving to the parent key, or another key.\n     */\n    async unaliasKeywordParent(keys, depth) {\n        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);\n    }\n    /**\n     * Un-alias all keywords in the given hash.\n     * @param {{[p: string]: any}} hash A hash object.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth.\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.\n     */\n    async unaliasKeywords(hash, keys, depth, context) {\n        const newHash = {};\n        for (const key in hash) {\n            newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];\n        }\n        return newHash;\n    }\n    /**\n     * Check if we are processing a literal (including JSON literals) at the given depth.\n     * This will also check higher levels,\n     * because if a parent is a literal,\n     * then the deeper levels are definitely a literal as well.\n     * @param {number} depth The depth.\n     * @return {boolean} If we are processing a literal.\n     */\n    isLiteral(depth) {\n        for (let i = depth; i >= 0; i--) {\n            if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check how many parents should be skipped for checking the @graph for the given node.\n     *\n     * @param {number} depth The depth of the node.\n     * @param {any[]} keys An array of keys.\n     * @return {number} The graph depth offset.\n     */\n    async getDepthOffsetGraph(depth, keys) {\n        for (let i = depth - 1; i > 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@graph') {\n                // Skip further processing if we are already in an @graph-@id or @graph-@index container\n                const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i)).containers;\n                if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {\n                    return -1;\n                }\n                return depth - i - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if the given subject is of a valid type.\n     * This should be called when applying @reverse'd properties.\n     * @param {Term} subject A subject.\n     */\n    validateReverseSubject(subject) {\n        if (subject.termType === 'Literal') {\n            throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n        }\n    }\n    /**\n     * Get the default graph.\n     * @return {Term} An RDF term.\n     */\n    getDefaultGraph() {\n        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();\n    }\n    /**\n     * Get the current graph, while taking into account a graph that can be defined via @container: @graph.\n     * If not within a graph container, the default graph will be returned.\n     * @param keys The current keys.\n     * @param depth The current depth.\n     */\n    async getGraphContainerValue(keys, depth) {\n        // Default to default graph\n        let graph = this.getDefaultGraph();\n        // Check if we are in an @container: @graph.\n        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer\n            .getContainerHandler(this.parsingContext, keys, depth);\n        if ('@graph' in containers) {\n            // Get the graph from the stack.\n            const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);\n            const entry = this.parsingContext.graphContainerTermStack[depthContainer];\n            graph = entry ? entry[graphContainerIndex] : null;\n            // Set the graph in the stack if none has been set yet.\n            if (!graph) {\n                let graphId = null;\n                if ('@id' in containers) {\n                    const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);\n                    if (keyUnaliased !== null) {\n                        graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);\n                    }\n                }\n                if (!graphId) {\n                    graphId = this.dataFactory.blankNode();\n                }\n                if (!this.parsingContext.graphContainerTermStack[depthContainer]) {\n                    this.parsingContext.graphContainerTermStack[depthContainer] = {};\n                }\n                graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;\n            }\n        }\n        return graph;\n    }\n    /**\n     * Get the properties depth for retrieving properties.\n     *\n     * Typically, the properties depth will be identical to the given depth.\n     *\n     * The following exceptions apply:\n     * * When the parent is @reverse, the depth is decremented by one.\n     * * When @nest parents are found, the depth is decremented by the number of @nest parents.\n     * If in combination with the exceptions above an intermediary array is discovered,\n     * the depth is also decremented by this number of arrays.\n     *\n     * @param keys The current key chain.\n     * @param depth The current depth.\n     */\n    async getPropertiesDepth(keys, depth) {\n        let lastValidDepth = depth;\n        for (let i = depth - 1; i > 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                const parentKey = await this.unaliasKeyword(keys[i], keys, i);\n                if (parentKey === '@reverse') {\n                    return i;\n                }\n                else if (parentKey === '@nest') {\n                    lastValidDepth = i;\n                }\n                else {\n                    return lastValidDepth;\n                }\n            }\n        }\n        return lastValidDepth;\n    }\n    /**\n     * Get the key for the current container entry.\n     * @param key A key, can be falsy.\n     * @param keys The key chain.\n     * @param depth The current depth to get the key from.\n     * @return Promise resolving to the key.\n     *         Null will be returned for @none entries, with aliasing taken into account.\n     */\n    async getContainerKey(key, keys, depth) {\n        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);\n        return keyUnaliased === '@none' ? null : keyUnaliased;\n    }\n}\nexports.Util = Util;\nUtil.XSD = 'http://www.w3.org/2001/XMLSchema#';\nUtil.XSD_BOOLEAN = Util.XSD + 'boolean';\nUtil.XSD_INTEGER = Util.XSD + 'integer';\nUtil.XSD_DOUBLE = Util.XSD + 'double';\nUtil.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n//# sourceMappingURL=Util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIdentifier = void 0;\n/**\n * Container handler for @id.\n *\n * It assumes that the current key is the identifier of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerIdentifier {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        let id;\n        // First check if the child node already has a defined id.\n        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {\n            // Use the existing identifier\n            id = parsingContext.idStack[depth + 1][0];\n        }\n        else {\n            // Create the identifier\n            const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);\n            const maybeId = keyUnaliased !== null\n                ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth])\n                : util.dataFactory.blankNode();\n            // Do nothing if the id is invalid\n            if (!maybeId) {\n                parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n                return;\n            }\n            id = maybeId;\n            // Insert the id into the stack so that buffered children can make us of it.\n            parsingContext.idStack[depth + 1] = [id];\n        }\n        // Insert the id into the stack so that parents can make use of it.\n        // Insert it as an array because multiple id container entries may exist\n        let ids = parsingContext.idStack[depth];\n        if (!ids) {\n            ids = parsingContext.idStack[depth] = [];\n        }\n        // Only insert the term if it does not exist yet in the array.\n        if (!ids.some((term) => term.equals(id))) {\n            ids.push(id);\n        }\n        // Flush any pending flush buffers\n        if (!await parsingContext.handlePendingContainerFlushBuffers()) {\n            parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n        }\n    }\n}\nexports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;\n//# sourceMappingURL=ContainerHandlerIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIndex = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @index.\n *\n * This will ignore the current key and add this entry to the parent node.\n */\nclass ContainerHandlerIndex {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            const graphContainer = '@graph' in containers;\n            // Check if the container is a property-based container by checking if there is a valid @index.\n            const context = await parsingContext.getContext(keys);\n            const indexKey = keys[depth - 1];\n            const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);\n            if (indexPropertyRaw) {\n                // Validate the @index value\n                if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {\n                    throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                if (typeof indexPropertyRaw !== 'string') {\n                    throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // When @index is used, values must be node values, unless @type: @id is defined in the context\n                if (typeof value !== 'object') {\n                    // Error if we don't have @type: @id\n                    if (Util_1.Util.getContextValueType(context, indexKey) !== '@id') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                    }\n                    // Add an @id to the stack, so our expanded @index value can make use of it\n                    const id = util.resourceToTerm(context, value);\n                    if (id) {\n                        parsingContext.idStack[depth + 1] = [id];\n                    }\n                }\n                // Expand the @index value\n                const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);\n                if (indexProperty) {\n                    const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);\n                    if (graphContainer) {\n                        // When we're in a graph container, attach the index to the graph identifier\n                        const graphId = await util.getGraphContainerValue(keys, depth + 1);\n                        for (const indexValue of indexValues) {\n                            parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));\n                        }\n                    }\n                    else {\n                        // Otherwise, attach the index to the node identifier\n                        for (const indexValue of indexValues) {\n                            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false);\n                        }\n                    }\n                }\n            }\n            const depthOffset = graphContainer ? 2 : 1;\n            await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerIndex = ContainerHandlerIndex;\n//# sourceMappingURL=ContainerHandlerIndex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerLanguage = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Container handler for @language.\n *\n * It assumes that the current key is the language of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerLanguage {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        const language = await util.getContainerKey(keys[depth], keys, depth);\n        if (Array.isArray(value)) {\n            // No type-checking needed, will be handled on each value when this handler is called recursively.\n            value = value.map((subValue) => ({ '@value': subValue, '@language': language }));\n        }\n        else {\n            if (typeof value !== 'string') {\n                throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);\n            }\n            value = { '@value': value, '@language': language };\n        }\n        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerLanguage = ContainerHandlerLanguage;\n//# sourceMappingURL=ContainerHandlerLanguage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerType = void 0;\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @type.\n *\n * This will add this entry to the parent node, and use the current key as an rdf:type value.\n */\nclass ContainerHandlerType {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            if (typeof value === 'string') {\n                // Determine the @type of the container\n                const context = await parsingContext.getContext(keys);\n                const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);\n                // String values refer to node references\n                const id = containerTypeType === '@vocab'\n                    ? await util.createVocabOrBaseTerm(context, value)\n                    : await util.resourceToTerm(context, value);\n                if (id) {\n                    // Handle the value of this node as @id, which will also cause the predicate from above to be emitted.\n                    const subValue = { '@id': id.termType === 'NamedNode' ? id.value : value };\n                    await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);\n                    // Set the id in the stack so it can be used for the rdf:type handling later on\n                    parsingContext.idStack[depth + 1] = [id];\n                }\n            }\n            else {\n                // Other values are handled by handling them as a proper job\n                // Check needed for cases where entries don't have an explicit @id\n                const entryHasIdentifier = !!parsingContext.idStack[depth + 1];\n                // Handle the value of this node, which will also cause the predicate from above to be emitted.\n                if (!entryHasIdentifier) {\n                    delete parsingContext.idStack[depth]; // Force new (blank node) identifier\n                }\n                await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n                if (!entryHasIdentifier) {\n                    parsingContext.idStack[depth + 1] = parsingContext.idStack[depth]; // Copy the id to the child node, for @type\n                }\n            }\n            // Identify the type to emit.\n            const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);\n            const type = keyOriginal !== null\n                ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal)\n                : null;\n            if (type) {\n                // Push the type to the stack using the rdf:type predicate\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false);\n            }\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n    }\n}\nexports.ContainerHandlerType = ContainerHandlerType;\n//# sourceMappingURL=ContainerHandlerType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerArrayValue = void 0;\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of an array.\n */\nclass EntryHandlerArrayValue {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return typeof keys[depth] === 'number';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        let parentKey = await util.unaliasKeywordParent(keys, depth);\n        // Check if we have an anonymous list\n        if (parentKey === '@list') {\n            // Our value is part of an array\n            // Determine the list root key\n            let listRootKey = null;\n            let listRootDepth = 0;\n            for (let i = depth - 2; i > 0; i--) {\n                const keyOption = keys[i];\n                if (typeof keyOption === 'string' || typeof keyOption === 'number') {\n                    listRootDepth = i;\n                    listRootKey = keyOption;\n                    break;\n                }\n            }\n            if (listRootKey !== null) {\n                // Emit the given objects as list elements\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n            }\n        }\n        else if (parentKey === '@set') {\n            // Our value is part of a set, so we just add it to the parent-parent\n            await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);\n        }\n        else if (parentKey !== undefined && parentKey !== '@type') {\n            // Buffer our value using the parent key as predicate\n            // Determine the first parent key that is *not* an array key\n            // This is needed in case we have an @list container with nested arrays,\n            // where each of them should produce nested RDF lists.\n            for (let i = depth - 1; i > 0; i--) {\n                if (typeof keys[i] !== 'number') {\n                    parentKey = await util.unaliasKeyword(keys[i], keys, i);\n                    break;\n                }\n            }\n            // Check if the predicate is marked as an @list in the context\n            const parentContext = await parsingContext.getContext(keys.slice(0, -1));\n            if ('@list' in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {\n                // Our value is part of an array\n                // Emit the given objects as list elements\n                parsingContext.emittedStack[depth + 1] = true; // Ensure the creation of bnodes for empty nodes\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);\n                }\n            }\n            else {\n                // Copy the stack values up one level so that the next job can access them.\n                parsingContext.shiftStack(depth, 1);\n                // Execute the job one level higher\n                await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);\n                // Remove any defined contexts at this level to avoid it to propagate to the next array element.\n                parsingContext.contextTree.removeContext(keys.slice(0, -1));\n            }\n        }\n    }\n    async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {\n        // Buffer our value as an RDF list using the listRootKey as predicate\n        let listPointer = parsingContext.listPointerStack[depth];\n        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))['@value'] !== null) {\n            if (!listPointer || !listPointer.value) {\n                const linkTerm = util.dataFactory.blankNode();\n                listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };\n            }\n            else {\n                // rdf:rest links are always emitted before the next element,\n                // as the blank node identifier is only created at that point.\n                // Because of this reason, the final rdf:nil is emitted when the stack depth is decreased.\n                const newLinkTerm = util.dataFactory.blankNode();\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));\n                // Update the list pointer for the next element\n                listPointer.value = newLinkTerm;\n            }\n            // Emit a list element for the current value\n            // Omit rdf:first if the value is invalid\n            if (value) {\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));\n            }\n        }\n        else {\n            // A falsy list element if found.\n            // Mark it as an rdf:nil list until another valid list element comes in\n            if (!listPointer) {\n                listPointer = { listRootDepth, listId: util.rdfNil };\n            }\n        }\n        parsingContext.listPointerStack[depth] = listPointer;\n    }\n}\nexports.EntryHandlerArrayValue = EntryHandlerArrayValue;\n//# sourceMappingURL=EntryHandlerArrayValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerContainer = void 0;\nconst ContainerHandlerIdentifier_1 = require(\"../containerhandler/ContainerHandlerIdentifier\");\nconst ContainerHandlerIndex_1 = require(\"../containerhandler/ContainerHandlerIndex\");\nconst ContainerHandlerLanguage_1 = require(\"../containerhandler/ContainerHandlerLanguage\");\nconst ContainerHandlerType_1 = require(\"../containerhandler/ContainerHandlerType\");\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of a container type (like @index),\n * as specified by {@link IContainerHandler}.\n */\nclass EntryHandlerContainer {\n    /**\n     * Check fit the given container is a simple @graph container.\n     * Concretely, it will check if no @index or @id is active as well.\n     * @param containers A container hash.\n     */\n    static isSimpleGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length === 2) || Object.keys(containers).length === 1);\n    }\n    /**\n     * Check fit the given container is a complex @graph container.\n     * Concretely, it will check if @index or @id is active as well next to @graph.\n     * @param containers A container hash.\n     */\n    static isComplexGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length > 2)\n                || (!('@set' in containers) && Object.keys(containers).length > 1));\n    }\n    /**\n     * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.\n     * @param containers The applicable containers.\n     * @param depth The container depth.\n     * @param keys The array of keys.\n     * @return The graph index.\n     */\n    static getContainerGraphIndex(containers, depth, keys) {\n        let isSimpleGraphContainer = EntryHandlerContainer.isSimpleGraphContainer(containers);\n        let index = '';\n        for (let i = depth; i < keys.length; i++) {\n            if (!isSimpleGraphContainer || typeof keys[i] === 'number') {\n                index += ':' + keys[i];\n            }\n            // Only allow a second 'real' key if in a non-simple graph container.\n            if (!isSimpleGraphContainer && typeof keys[i] !== 'number') {\n                isSimpleGraphContainer = true;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the applicable container type at the given depth.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}\n     *          All applicable containers for the given depth,\n     *          the `depth` of the container root (can change when arrays are in the key chain),\n     *          and the `fallback` flag that indicates if the default container type was returned\n     *            (i.e., no dedicated container type is defined).\n     */\n    static async getContainerHandler(parsingContext, keys, depth) {\n        const fallback = {\n            containers: { '@set': true },\n            depth,\n            fallback: true,\n        };\n        // A flag that is enabled when @graph container should be tested in next iteration\n        let checkGraphContainer = false;\n        // Iterate from deeper to higher\n        const context = await parsingContext.getContext(keys, 2);\n        for (let i = depth - 1; i >= 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                // @graph containers without any other types are one level less deep, and require special handling\n                const containersSelf = Util_1.Util.getContextValue(context, '@container', keys[i], false);\n                if (containersSelf && EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {\n                    return {\n                        containers: containersSelf,\n                        depth: i + 1,\n                        fallback: false,\n                    };\n                }\n                const containersParent = Util_1.Util.getContextValue(context, '@container', keys[i - 1], false);\n                if (!containersParent) { // If we have the fallback container value\n                    if (checkGraphContainer) {\n                        // Return false if we were already expecting a @graph-@id of @graph-@index container\n                        return fallback;\n                    }\n                    // Check parent-parent, we may be in a @graph-@id of @graph-@index container, which have two levels\n                    checkGraphContainer = true;\n                }\n                else {\n                    // We had an invalid container next iteration, so we now have to check if we were in an @graph container\n                    const graphContainer = '@graph' in containersParent;\n                    // We're in a regular container\n                    for (const containerHandleName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n                        if (containersParent[containerHandleName]) {\n                            if (graphContainer) {\n                                // Only accept graph containers if their combined handlers can handle them.\n                                if (EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                                else {\n                                    return fallback;\n                                }\n                            }\n                            else {\n                                // Only accept if we were not expecting a @graph-@id of @graph-@index container\n                                if (checkGraphContainer) {\n                                    return fallback;\n                                }\n                                else {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    // Fail if no valid container handlers were found\n                    return fallback;\n                }\n            }\n        }\n        return fallback;\n    }\n    /**\n     * Check if we are handling a value at the given depth\n     * that is part of something that should be handled as a container,\n     * AND if this container should be buffered, so that it can be handled by a dedicated container handler.\n     *\n     * For instance, any container with @graph will NOT be buffered.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<boolean>} If we are in the scope of a container handler.\n     */\n    static async isBufferableContainerHandler(parsingContext, keys, depth) {\n        const handler = await EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);\n        return !handler.fallback && !('@graph' in handler.containers);\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return !!await this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);\n        for (const containerName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n            if (containers[containerName]) {\n                return {\n                    containers,\n                    handler: EntryHandlerContainer.CONTAINER_HANDLERS[containerName],\n                };\n            }\n        }\n        return null;\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);\n    }\n}\nexports.EntryHandlerContainer = EntryHandlerContainer;\nEntryHandlerContainer.CONTAINER_HANDLERS = {\n    '@id': new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),\n    '@index': new ContainerHandlerIndex_1.ContainerHandlerIndex(),\n    '@language': new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),\n    '@type': new ContainerHandlerType_1.ContainerHandlerType(),\n};\n//# sourceMappingURL=EntryHandlerContainer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerInvalidFallback = void 0;\n/**\n * A catch-all for properties, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerInvalidFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return true;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;\n//# sourceMappingURL=EntryHandlerInvalidFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerPredicate = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../Util\");\n/**\n * Interprets keys as predicates.\n * The most common case in JSON-LD processing.\n */\nclass EntryHandlerPredicate {\n    /**\n     * Handle the given predicate-object by either emitting it,\n     * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {Util} util A utility instance.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @param {Term} predicate The predicate.\n     * @param {Term} object The object.\n     * @param {boolean} reverse If the property is reversed.\n     * @return {Promise<void>} A promise resolving when handling is done.\n     */\n    static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse) {\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);\n        const depthPropertiesGraph = depth - depthOffsetGraph;\n        const subjects = parsingContext.idStack[depthProperties];\n        if (subjects) {\n            // Emit directly if the @id was already defined\n            for (const subject of subjects) {\n                // Check if we're in a @graph context\n                const atGraph = depthOffsetGraph >= 0;\n                if (atGraph) {\n                    const graphs = parsingContext.idStack[depthPropertiesGraph - 1];\n                    if (graphs) {\n                        for (const graph of graphs) {\n                            // Emit our quad if graph @id is known\n                            if (reverse) {\n                                util.validateReverseSubject(object);\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                            }\n                            else {\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                            }\n                        }\n                    }\n                    else {\n                        // Buffer our triple if graph @id is not known yet.\n                        if (reverse) {\n                            util.validateReverseSubject(object);\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject });\n                        }\n                        else {\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1)\n                                .push({ subject, predicate, object });\n                        }\n                    }\n                }\n                else {\n                    // Emit if no @graph was applicable\n                    const graph = await util.getGraphContainerValue(keys, depthProperties);\n                    if (reverse) {\n                        util.validateReverseSubject(object);\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                    }\n                    else {\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                    }\n                }\n            }\n        }\n        else {\n            // Buffer until our @id becomes known, or we go up the stack\n            if (reverse) {\n                util.validateReverseSubject(object);\n            }\n            parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse });\n        }\n    }\n    isPropertyHandler() {\n        return true;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = keys[depth];\n        if (key) {\n            const context = await parsingContext.getContext(keys);\n            if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {\n                // If this valid predicate is of type @json, mark it so in the stack so that no deeper handling of nodes occurs.\n                if (Util_1.Util.getContextValueType(context, key) === '@json') {\n                    parsingContext.jsonLiteralStack[depth + 1] = true;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return keys[depth];\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        const keyOriginal = keys[depth];\n        const context = await parsingContext.getContext(keys);\n        const predicate = await util.predicateToTerm(context, key);\n        if (predicate) {\n            const objects = await util.valueToTerm(context, key, value, depth, keys);\n            if (objects.length) {\n                for (let object of objects) {\n                    const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n                    if (value) {\n                        // Special case if our term was defined as an @list, but does not occur in an array,\n                        // In that case we just emit it as an RDF list with a single element.\n                        const listValueContainer = '@list' in Util_1.Util.getContextValueContainer(context, key);\n                        if (listValueContainer || value['@list']) {\n                            if (((listValueContainer && !Array.isArray(value) && !value['@list'])\n                                || (value['@list'] && !Array.isArray(value['@list'])))\n                                && object !== util.rdfNil) {\n                                const listPointer = util.dataFactory.blankNode();\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));\n                                object = listPointer;\n                            }\n                            // Lists are not allowed in @reverse'd properties\n                            if (reverse && !parsingContext.allowSubjectList) {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n                            }\n                        }\n                    }\n                    await EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse);\n                }\n            }\n        }\n    }\n}\nexports.EntryHandlerPredicate = EntryHandlerPredicate;\n//# sourceMappingURL=EntryHandlerPredicate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeyword = void 0;\n/**\n * An abstract keyword entry handler.\n */\nclass EntryHandlerKeyword {\n    constructor(keyword) {\n        this.keyword = keyword;\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return key === this.keyword;\n    }\n}\nexports.EntryHandlerKeyword = EntryHandlerKeyword;\n//# sourceMappingURL=EntryHandlerKeyword.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordGraph = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordGraph extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@graph');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // The current identifier identifies a graph for the deeper level.\n        parsingContext.graphStack[depth + 1] = true;\n    }\n}\nexports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;\n//# sourceMappingURL=EntryHandlerKeywordGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordNest = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @nest entries.\n */\nclass EntryHandlerKeywordNest extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@nest');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;\n//# sourceMappingURL=EntryHandlerKeywordNest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordType = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../../Util\");\nconst EntryHandlerPredicate_1 = require(\"../EntryHandlerPredicate\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordType extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@type');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keyOriginal = keys[depth];\n        // The current identifier identifies an rdf:type predicate.\n        // But we only emit it once the node closes,\n        // as it's possible that the @type is used to identify the datatype of a literal, which we ignore here.\n        const context = await parsingContext.getContext(keys);\n        const predicate = util.rdfType;\n        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n        // Handle multiple values if the value is an array\n        const elements = Array.isArray(value) ? value : [value];\n        for (const element of elements) {\n            if (typeof element !== 'string') {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));\n            }\n            const type = util.createVocabOrBaseTerm(context, element);\n            if (type) {\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse);\n            }\n        }\n        // Collect type-scoped contexts if they exist\n        let scopedContext = Promise.resolve(context);\n        let hasTypedScopedContext = false;\n        for (const element of elements.sort()) { // Spec requires lexicographical ordering\n            const typeContext = Util_1.Util.getContextValue(context, '@context', element, null);\n            if (typeContext) {\n                hasTypedScopedContext = true;\n                scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));\n            }\n        }\n        // Error if an out-of-order type-scoped context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType)\n            && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order type-scoped context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // If at least least one type-scoped context applies, set them in the tree.\n        if (hasTypedScopedContext) {\n            // Do not propagate by default\n            scopedContext = scopedContext.then((c) => {\n                if (!('@propagate' in c.getContextRaw())) {\n                    c.getContextRaw()['@propagate'] = false;\n                }\n                // Set the original context at this depth as a fallback\n                // This is needed when a context was already defined at the given depth,\n                // and this context needs to remain accessible from child nodes when propagation is disabled.\n                if (c.getContextRaw()['@propagate'] === false) {\n                    c.getContextRaw()['@__propagateFallback'] = context.getContextRaw();\n                }\n                return c;\n            });\n            // Set the new context in the context tree\n            parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);\n        }\n        // Flag that type has been processed at this depth\n        parsingContext.processingType[depth] = true;\n    }\n}\nexports.EntryHandlerKeywordType = EntryHandlerKeywordType;\n//# sourceMappingURL=EntryHandlerKeywordType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordValue = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @value entries.\n */\nclass EntryHandlerKeywordValue extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@value');\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        // If this is @value, mark it so in the stack so that no deeper handling of nodes occurs.\n        const key = keys[depth];\n        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {\n            parsingContext.literalStack[depth] = true;\n        }\n        return super.validate(parsingContext, util, keys, depth, inProperty);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === '@value';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // If the value is valid, indicate that we are processing a literal.\n        // The actual value will be determined at the parent level when the @value is part of an object,\n        // because we may want to take into account additional entries such as @language.\n        // See {@link Util.valueToTerm}\n        // Indicate that we are processing a literal, and that no later predicates should be parsed at this depth.\n        parsingContext.literalStack[depth] = true;\n        // Void any buffers that we may have accumulated up until now\n        delete parsingContext.unidentifiedValuesBuffer[depth];\n        delete parsingContext.unidentifiedGraphsBuffer[depth];\n        // Indicate that we have not emitted at this depth\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;\n//# sourceMappingURL=EntryHandlerKeywordValue.js.map","/*global Buffer*/\n// Named constants with unique integer values\nvar C = {};\n// Tokens\nvar LEFT_BRACE    = C.LEFT_BRACE    = 0x1;\nvar RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;\nvar LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;\nvar RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;\nvar COLON         = C.COLON         = 0x5;\nvar COMMA         = C.COMMA         = 0x6;\nvar TRUE          = C.TRUE          = 0x7;\nvar FALSE         = C.FALSE         = 0x8;\nvar NULL          = C.NULL          = 0x9;\nvar STRING        = C.STRING        = 0xa;\nvar NUMBER        = C.NUMBER        = 0xb;\n// Tokenizer States\nvar START   = C.START   = 0x11;\nvar STOP    = C.STOP    = 0x12;\nvar TRUE1   = C.TRUE1   = 0x21;\nvar TRUE2   = C.TRUE2   = 0x22;\nvar TRUE3   = C.TRUE3   = 0x23;\nvar FALSE1  = C.FALSE1  = 0x31;\nvar FALSE2  = C.FALSE2  = 0x32;\nvar FALSE3  = C.FALSE3  = 0x33;\nvar FALSE4  = C.FALSE4  = 0x34;\nvar NULL1   = C.NULL1   = 0x41;\nvar NULL2   = C.NULL2   = 0x42;\nvar NULL3   = C.NULL3   = 0x43;\nvar NUMBER1 = C.NUMBER1 = 0x51;\nvar NUMBER3 = C.NUMBER3 = 0x53;\nvar STRING1 = C.STRING1 = 0x61;\nvar STRING2 = C.STRING2 = 0x62;\nvar STRING3 = C.STRING3 = 0x63;\nvar STRING4 = C.STRING4 = 0x64;\nvar STRING5 = C.STRING5 = 0x65;\nvar STRING6 = C.STRING6 = 0x66;\n// Parser States\nvar VALUE   = C.VALUE   = 0x71;\nvar KEY     = C.KEY     = 0x72;\n// Parser Modes\nvar OBJECT  = C.OBJECT  = 0x81;\nvar ARRAY   = C.ARRAY   = 0x82;\n// Character constants\nvar BACK_SLASH =      \"\\\\\".charCodeAt(0);\nvar FORWARD_SLASH =   \"\\/\".charCodeAt(0);\nvar BACKSPACE =       \"\\b\".charCodeAt(0);\nvar FORM_FEED =       \"\\f\".charCodeAt(0);\nvar NEWLINE =         \"\\n\".charCodeAt(0);\nvar CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\nvar TAB =             \"\\t\".charCodeAt(0);\n\nvar STRING_BUFFER_SIZE = 64 * 1024;\n\nfunction Parser() {\n  this.tState = START;\n  this.value = undefined;\n\n  this.string = undefined; // string data\n  this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);\n  this.stringBufferOffset = 0;\n  this.unicode = undefined; // unicode escapes\n  this.highSurrogate = undefined;\n\n  this.key = undefined;\n  this.mode = undefined;\n  this.stack = [];\n  this.state = VALUE;\n  this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n  this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n  this.temp_buffs = { \"2\": new Buffer(2), \"3\": new Buffer(3), \"4\": new Buffer(4) }; // for rebuilding chars split before boundary is reached\n\n  // Stream offset\n  this.offset = -1;\n}\n\n// Slow code to string converter (only used when throwing syntax errors)\nParser.toknam = function (code) {\n  var keys = Object.keys(C);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    if (C[key] === code) { return key; }\n  }\n  return code && (\"0x\" + code.toString(16));\n};\n\nvar proto = Parser.prototype;\nproto.onError = function (err) { throw err; };\nproto.charError = function (buffer, i) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + JSON.stringify(String.fromCharCode(buffer[i])) + \" at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n};\nproto.appendStringChar = function (char) {\n  if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8');\n    this.stringBufferOffset = 0;\n  }\n\n  this.stringBuffer[this.stringBufferOffset++] = char;\n};\nproto.appendStringBuf = function (buf, start, end) {\n  var size = buf.length;\n  if (typeof start === 'number') {\n    if (typeof end === 'number') {\n      if (end < 0) {\n        // adding a negative end decreeses the size\n        size = buf.length - start + end;\n      } else {\n        size = end - start;\n      }\n    } else {\n      size = buf.length - start;\n    }\n  }\n\n  if (size < 0) {\n    size = 0;\n  }\n\n  if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n    this.stringBufferOffset = 0;\n  }\n\n  buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);\n  this.stringBufferOffset += size;\n};\nproto.write = function (buffer) {\n  if (typeof buffer === \"string\") buffer = new Buffer(buffer);\n  var n;\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    if (this.tState === START){\n      n = buffer[i];\n      this.offset++;\n      if(n === 0x7b){ this.onToken(LEFT_BRACE, \"{\"); // {\n      }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, \"}\"); // }\n      }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, \"[\"); // [\n      }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, \"]\"); // ]\n      }else if(n === 0x3a){ this.onToken(COLON, \":\");  // :\n      }else if(n === 0x2c){ this.onToken(COMMA, \",\"); // ,\n      }else if(n === 0x74){ this.tState = TRUE1;  // t\n      }else if(n === 0x66){ this.tState = FALSE1;  // f\n      }else if(n === 0x6e){ this.tState = NULL1; // n\n      }else if(n === 0x22){ // \"\n        this.string = \"\";\n        this.stringBufferOffset = 0;\n        this.tState = STRING1;\n      }else if(n === 0x2d){ this.string = \"-\"; this.tState = NUMBER1; // -\n      }else{\n        if (n >= 0x30 && n < 0x40) { // 1-9\n          this.string = String.fromCharCode(n); this.tState = NUMBER3;\n        } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {\n          // whitespace\n        } else {\n          return this.charError(buffer, i);\n        }\n      }\n    }else if (this.tState === STRING1){ // After open quote\n      n = buffer[i]; // get current byte from buffer\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];\n        }\n\n        this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n        i = i + j - 1;\n      } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n        if (n <= 193 || n > 244) {\n          return this.onError(new Error(\"Invalid UTF-8 character at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n        }\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split\n          for (var k = 0; k <= (buffer.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;\n          i = buffer.length - 1;\n        } else {\n          this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);\n          i = i + this.bytes_in_sequence - 1;\n        }\n      } else if (n === 0x22) {\n        this.tState = START;\n        this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n        this.stringBufferOffset = 0;\n        this.onToken(STRING, this.string);\n        this.offset += Buffer.byteLength(this.string, 'utf8') + 1;\n        this.string = undefined;\n      }\n      else if (n === 0x5c) {\n        this.tState = STRING2;\n      }\n      else if (n >= 0x20) { this.appendStringChar(n); }\n      else {\n          return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING2){ // After backslash\n      n = buffer[i];\n      if(n === 0x22){ this.appendStringChar(n); this.tState = STRING1;\n      }else if(n === 0x5c){ this.appendStringChar(BACK_SLASH); this.tState = STRING1;\n      }else if(n === 0x2f){ this.appendStringChar(FORWARD_SLASH); this.tState = STRING1;\n      }else if(n === 0x62){ this.appendStringChar(BACKSPACE); this.tState = STRING1;\n      }else if(n === 0x66){ this.appendStringChar(FORM_FEED); this.tState = STRING1;\n      }else if(n === 0x6e){ this.appendStringChar(NEWLINE); this.tState = STRING1;\n      }else if(n === 0x72){ this.appendStringChar(CARRIAGE_RETURN); this.tState = STRING1;\n      }else if(n === 0x74){ this.appendStringChar(TAB); this.tState = STRING1;\n      }else if(n === 0x75){ this.unicode = \"\"; this.tState = STRING3;\n      }else{\n        return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes\n      n = buffer[i];\n      // 0-9 A-F a-f\n      if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {\n        this.unicode += String.fromCharCode(n);\n        if (this.tState++ === STRING6) {\n          var intVal = parseInt(this.unicode, 16);\n          this.unicode = undefined;\n          if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < (0xDFFF + 1)) { //<56320,57343> - lowSurrogate\n            this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));\n            this.highSurrogate = undefined;\n          } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < (0xDBFF + 1)) { //<55296,56319> - highSurrogate\n            this.highSurrogate = intVal;\n          } else {\n            if (this.highSurrogate !== undefined) {\n              this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));\n              this.highSurrogate = undefined;\n            }\n            this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));\n          }\n          this.tState = STRING1;\n        }\n      } else {\n        return this.charError(buffer, i);\n      }\n    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {\n        n = buffer[i];\n\n        switch (n) {\n          case 0x30: // 0\n          case 0x31: // 1\n          case 0x32: // 2\n          case 0x33: // 3\n          case 0x34: // 4\n          case 0x35: // 5\n          case 0x36: // 6\n          case 0x37: // 7\n          case 0x38: // 8\n          case 0x39: // 9\n          case 0x2e: // .\n          case 0x65: // e\n          case 0x45: // E\n          case 0x2b: // +\n          case 0x2d: // -\n            this.string += String.fromCharCode(n);\n            this.tState = NUMBER3;\n            break;\n          default:\n            this.tState = START;\n            var result = Number(this.string);\n\n            if (isNaN(result)){\n              return this.charError(buffer, i);\n            }\n\n            if ((this.string.match(/[0-9]+/) == this.string) && (result.toString() != this.string)) {\n              // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number\n              this.onToken(STRING, this.string);\n            } else {\n              this.onToken(NUMBER, result);\n            }\n\n            this.offset += this.string.length - 1;\n            this.string = undefined;\n            i--;\n            break;\n        }\n    }else if (this.tState === TRUE1){ // r\n      if (buffer[i] === 0x72) { this.tState = TRUE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE2){ // u\n      if (buffer[i] === 0x75) { this.tState = TRUE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE3){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE1){ // a\n      if (buffer[i] === 0x61) { this.tState = FALSE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE2){ // l\n      if (buffer[i] === 0x6c) { this.tState = FALSE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE3){ // s\n      if (buffer[i] === 0x73) { this.tState = FALSE4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE4){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL1){ // u\n      if (buffer[i] === 0x75) { this.tState = NULL2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL2){ // l\n      if (buffer[i] === 0x6c) { this.tState = NULL3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL3){ // l\n      if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }\n      else { return this.charError(buffer, i); }\n    }\n  }\n};\nproto.onToken = function (token, value) {\n  // Override this to get events\n};\n\nproto.parseError = function (token, value) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + Parser.toknam(token) + (value ? (\"(\" + JSON.stringify(value) + \")\") : \"\") + \" in state \" + Parser.toknam(this.state)));\n};\nproto.push = function () {\n  this.stack.push({value: this.value, key: this.key, mode: this.mode});\n};\nproto.pop = function () {\n  var value = this.value;\n  var parent = this.stack.pop();\n  this.value = parent.value;\n  this.key = parent.key;\n  this.mode = parent.mode;\n  this.emit(value);\n  if (!this.mode) { this.state = VALUE; }\n};\nproto.emit = function (value) {\n  if (this.mode) { this.state = COMMA; }\n  this.onValue(value);\n};\nproto.onValue = function (value) {\n  // Override me\n};\nproto.onToken = function (token, value) {\n  if(this.state === VALUE){\n    if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){\n      if (this.value) {\n        this.value[this.key] = value;\n      }\n      this.emit(value);\n    }else if(token === LEFT_BRACE){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = {};\n      } else {\n        this.value = {};\n      }\n      this.key = undefined;\n      this.state = KEY;\n      this.mode = OBJECT;\n    }else if(token === LEFT_BRACKET){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = [];\n      } else {\n        this.value = [];\n      }\n      this.key = 0;\n      this.mode = ARRAY;\n      this.state = VALUE;\n    }else if(token === RIGHT_BRACE){\n      if (this.mode === OBJECT) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else if(token === RIGHT_BRACKET){\n      if (this.mode === ARRAY) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else{\n      return this.parseError(token, value);\n    }\n  }else if(this.state === KEY){\n    if (token === STRING) {\n      this.key = value;\n      this.state = COLON;\n    } else if (token === RIGHT_BRACE) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else if(this.state === COLON){\n    if (token === COLON) { this.state = VALUE; }\n    else { return this.parseError(token, value); }\n  }else if(this.state === COMMA){\n    if (token === COMMA) {\n      if (this.mode === ARRAY) { this.key++; this.state = VALUE; }\n      else if (this.mode === OBJECT) { this.state = KEY; }\n\n    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else{\n    return this.parseError(token, value);\n  }\n};\n\nParser.C = C;\n\nmodule.exports = Parser;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/BlankNode\"), exports);\n__exportStar(require(\"./lib/DataFactory\"), exports);\n__exportStar(require(\"./lib/DefaultGraph\"), exports);\n__exportStar(require(\"./lib/Literal\"), exports);\n__exportStar(require(\"./lib/NamedNode\"), exports);\n__exportStar(require(\"./lib/Quad\"), exports);\n__exportStar(require(\"./lib/Variable\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n//# sourceMappingURL=BlankNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n//# sourceMappingURL=DefaultGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\nconst NamedNode_1 = require(\"./NamedNode\");\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n        }\n        else if (languageOrDatatype) {\n            this.language = '';\n            this.datatype = languageOrDatatype;\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language && other.datatype.equals(this.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n//# sourceMappingURL=Literal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n//# sourceMappingURL=NamedNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n//# sourceMappingURL=Quad.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n//# sourceMappingURL=Variable.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./lib/Resolve\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\nfunction resolve(relativeIRI, baseIRI) {\n    baseIRI = baseIRI || '';\n    const baseFragmentPos = baseIRI.indexOf('#');\n    // Ignore any fragments in the base IRI\n    if (baseFragmentPos > 0) {\n        baseIRI = baseIRI.substr(0, baseFragmentPos);\n    }\n    // Convert empty value directly to base IRI\n    if (!relativeIRI.length) {\n        // At this point, the baseIRI MUST be absolute, otherwise we error\n        if (baseIRI.indexOf(':') < 0) {\n            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n        }\n        return baseIRI;\n    }\n    // If the value starts with a query character, concat directly (but strip the existing query)\n    if (relativeIRI.startsWith('?')) {\n        const baseQueryPos = baseIRI.indexOf('?');\n        if (baseQueryPos > 0) {\n            baseIRI = baseIRI.substr(0, baseQueryPos);\n        }\n        return baseIRI + relativeIRI;\n    }\n    // If the value starts with a fragment character, concat directly\n    if (relativeIRI.startsWith('#')) {\n        return baseIRI + relativeIRI;\n    }\n    // Ignore baseIRI if it is empty\n    if (!baseIRI.length) {\n        const relativeColonPos = relativeIRI.indexOf(':');\n        if (relativeColonPos < 0) {\n            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);\n        }\n        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);\n    }\n    // Ignore baseIRI if the value is absolute\n    const valueColonPos = relativeIRI.indexOf(':');\n    if (valueColonPos >= 0) {\n        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // At this point, the baseIRI MUST be absolute, otherwise we error\n    const baseColonPos = baseIRI.indexOf(':');\n    if (baseColonPos < 0) {\n        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n    }\n    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);\n    // Inherit the baseIRI scheme if the value starts with '//'\n    if (relativeIRI.indexOf('//') === 0) {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n    let baseSlashAfterColonPos;\n    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n        // If there is no additional '/' after the '//'.\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n        if (baseSlashAfterColonPos < 0) {\n            // If something other than a '/' follows the '://', append the value after a '/',\n            // otherwise, prefix the value with only the baseIRI scheme.\n            if (baseIRI.length > baseColonPos + 3) {\n                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n            else {\n                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n        }\n    }\n    else {\n        // If there is not even a single '/' after the ':'\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);\n        if (baseSlashAfterColonPos < 0) {\n            // If we don't have a '/' after the ':',\n            // prefix the value with only the baseIRI scheme.\n            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n        }\n    }\n    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n    if (relativeIRI.indexOf('/') === 0) {\n        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n    }\n    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');\n    // Ignore everything after the last '/' in the baseIRI path\n    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);\n        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n        // This change is only allowed if there is something else following the path\n        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n            relativeIRI = relativeIRI.substr(1);\n        }\n    }\n    // Prefix the value with the baseIRI path where\n    relativeIRI = baseIRIPath + relativeIRI;\n    // Remove dot segment from the IRI\n    relativeIRI = removeDotSegments(relativeIRI);\n    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\nfunction removeDotSegments(path) {\n    // Prepare a buffer with segments between each '/.\n    // Each segment represents an array of characters.\n    const segmentBuffers = [];\n    let i = 0;\n    while (i < path.length) {\n        // Remove '/.' or '/..'\n        switch (path[i]) {\n            case '/':\n                if (path[i + 1] === '.') {\n                    if (path[i + 2] === '.') {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Go to parent directory,\n                        // so we remove a parent segment\n                        segmentBuffers.pop();\n                        // Ensure that we end with a slash if there is a trailing '/..'\n                        if (!path[i + 3]) {\n                            segmentBuffers.push([]);\n                        }\n                        i += 3;\n                    }\n                    else {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Ensure that we end with a slash if there is a trailing '/.'\n                        if (!path[i + 2]) {\n                            segmentBuffers.push([]);\n                        }\n                        // Go to the current directory,\n                        // so we do nothing\n                        i += 2;\n                    }\n                }\n                else {\n                    // Start a new segment\n                    segmentBuffers.push([]);\n                    i++;\n                }\n                break;\n            case '#':\n            case '?':\n                // Query and fragment string should be appended unchanged\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n                // Break the while loop\n                i = path.length;\n                break;\n            default:\n                // Not a special character, just append it to our buffer\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n                i++;\n                break;\n        }\n    }\n    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');\n}\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n    // Determine where we should start looking for the first '/' that indicates the start of the path\n    let searchOffset = colonPosition + 1;\n    if (colonPosition >= 0) {\n        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n            searchOffset = colonPosition + 3;\n        }\n    }\n    else {\n        if (iri[0] === '/' && iri[1] === '/') {\n            searchOffset = 2;\n        }\n    }\n    // Determine the path\n    const pathSeparator = iri.indexOf('/', searchOffset);\n    if (pathSeparator < 0) {\n        return iri;\n    }\n    const base = iri.substr(0, pathSeparator);\n    const path = iri.substr(pathSeparator);\n    // Remove dot segments from the path\n    return base + removeDotSegments(path);\n}\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n    return !character || character === '#' || character === '?' || character === '/';\n}\n//# sourceMappingURL=Resolve.js.map"],"names":["Sink","ParserStream","Parser","constructor","options","super","module","exports","rdf","JsonLdParser","Transform","relativeIriProtocol","termCleanup","factory","term","termType","value","startsWith","namedNode","slice","length","quadCleanup","cleanup","quad","subject","predicate","object","graph","input","baseIRI","context","parser","dataFactory","streamingProfile","pipe","transform","objectMode","encoding","callback","on","Object","entries","forEach","prefix","iri","emit","err","destroy","DataFactory","BlankNode","id","this","nextId","equals","other","prototype","DefaultGraph","fromTermRaw","Literal","NamedNode","Quad","Variable","blankNode","literal","languageOrDatatype","indexOf","variable","defaultGraph","defaultGraphInstance","triple","fromTerm","original","call","fromQuad","language","datatype","stringDatatype","langStringDatatype","name","Error","Impl","import","output","assign","readable","serialize","toJSON","JSON","stringify","Array","isArray","reduce","t","cv","ci","comma","undefined","keys","sort","self","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","isDataView","obj","DataView","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","toString","normalizeName","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","done","Headers","headers","map","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","i","fromCharCode","join","bufferClone","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","get","type","rejected","then","text","decode","json","parse","oldValue","has","hasOwnProperty","thisArg","push","values","methods","normalizeMethod","method","upcased","toUpperCase","Request","url","credentials","mode","signal","referrer","form","trim","split","bytes","replace","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","key","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","DOMException","message","stack","create","fetch","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","defineProperty","COMPATIBLE_ENCODING_PATTERN","WS_TRIM_PATTERN","WS_CHAR_PATTERN","WS_FOLD_PATTERN","DELIMITER_PATTERN","WS_DELIMITER_PATTERN","TOKEN_PATTERN","STATE","IDLE","URI","ATTR","hasWhitespace","skipWhitespace","offset","needsQuotes","Link","refs","rel","links","attr","link","state","ref","expandRelations","end","uri","attrValue","isSingleOccurenceAttr","parseExtendedValue","formatAttribute","isCompatibleEncoding","isTokenAttr","escapeQuotes","rels","exec","formatExtendedAttribute","data","encodedValue","Buffer","isBuffer","encodeURIComponent","item","__createBinding","o","m","k","k2","enumerable","__exportStar","p","defaultExpandOptions","ContextParser","relative_to_absolute_iri_1","ErrorCoded_1","FetchDocumentLoader_1","JsonLdContextNormalized_1","Util_1","canonicalizeJson","documentLoader","FetchDocumentLoader","documentCache","validateContext","skipValidation","expandContentTypeToBase","remoteContextsDepthLimit","redirectSchemaOrgHttps","static","strictRange","errorCode","ErrorCoded","Util","REGEX_LANGUAGE_TAG","strictValues","ERROR_CODES","INVALID_BASE_DIRECTION","REGEX_DIRECTION_TAG","idifyReverseTerms","isValidKeyword","INVALID_IRI_MAPPING","isPotentialKeyword","expandPrefixedTerms","contextRaw","getContextRaw","EXPAND_KEYS_BLACKLIST","isReservedInternalKeyword","keyValue","ALIAS_DOMAIN_BLACKLIST","KEYWORD_REDEFINITION","ALIAS_RANGE_BLACKLIST","getContextValueId","INVALID_KEYWORD_ALIAS","INVALID_TERM_DEFINITION","isPrefixValue","changed","expandTerm","canAddIdEntry","isValidIri","newId","normalize","processingMode","normalizeLanguageTags","containersToHash","newValue","containerValue","applyScopedProtected","isTermProtected","validateKeywordRedefinitions","contextBefore","contextAfter","expandOptions","isPrefix","isSimpleTermDefinitionPrefix","valueBefore","valueAfter","PROTECTED_TERM_REDEFINITION","validate","valueType","substr","INVALID_VOCAB_MAPPING","INVALID_BASE_IRI","validateLanguage","INVALID_DEFAULT_LANGUAGE","INVALID_VERSION_VALUE","validateDirection","INVALID_CONTEXT_ENTRY","INVALID_PROPAGATE_VALUE","getPrefix","CYCLIC_IRI_MAPPING","isValidIriWeak","JsonLdContextNormalized","isCompactIri","objectKey","objectValue","INVALID_TYPE_MAPPING","INVALID_REVERSE_PROPERTY","CONTAINERS_1_0","INVALID_CONTAINER_MAPPING","CONTAINERS","INVALID_LANGUAGE_MAPPING","INVALID_PREFIX_VALUE","INVALID_NEST_VALUE","applyBaseEntry","inheritFromParent","parentContext","external","normalizeContextIri","contextIri","_a","async","ignoreScopedContexts","ignoreProtection","ignoreRemoteScopedContexts","INVALID_SCOPED_CONTEXT","minimalProcessing","parentContextInitial","DEFAULT_PROCESSING_MODE","remoteContexts","CONTEXT_OVERFLOW","hasProtectedTerms","INVALID_CONTEXT_NULLIFICATION","overriddenLoad","getOverriddenLoad","parsedStringContext","load","contextIris","contexts","all","subContext","reducedContexts","accContextPromise","contextEntry","accContext","newContext","importContext","INVALID_IMPORT_VALUE","loadImportContext","newContextWrapped","parseInnerContexts","INVALID_LOCAL_CONTEXT","cached","document","LOADING_REMOTE_CONTEXT_FAILED","INVALID_REMOTE_CONTEXT","RECURSIVE_CONTEXT_INCLUSION","importContextIri","allowPrefixForcing","allowPrefixNonGenDelims","allowVocabRelativeToBase","code","http_link_header_1","fetcher","accept","mediaType","colonPos","alternateUrl","linkHeader","LOADING_DOCUMENT_FAILED","ContextParser_1","expandVocab","contextValue","validIriMapping","vocab","vocabRelative","base","potentialKeyword","contextPrefixValue","compactIri","shortestPrefixing","suffix","separatorPos","charAt","isPrefixIriEndingWithGenDelim","keyword","KEYWORD_REGEX","prefixIri","ENDS_WITH_GEN_DELIM","Boolean","IRI_REGEX","IRI_REGEX_WEAK","VALID_KEYWORDS","ContextTree","subTrees","getContext","head","tail","subTree","depth","setContext","removeContext","path","jsonld_context_parser_1","stream_1","EntryHandlerArrayValue_1","EntryHandlerContainer_1","EntryHandlerInvalidFallback_1","EntryHandlerPredicate_1","EntryHandlerKeywordContext_1","EntryHandlerKeywordGraph_1","EntryHandlerKeywordId_1","EntryHandlerKeywordIncluded_1","EntryHandlerKeywordNest_1","EntryHandlerKeywordType_1","EntryHandlerKeywordUnknownFallback_1","EntryHandlerKeywordValue_1","ParsingContext_1","readableObjectMode","parsingContext","ParsingContext","util","jsonParser","contextJobs","typeJobs","contextAwaitingJobs","lastDepth","lastKeys","lastOnValueJob","attachJsonParserListeners","endsWith","MULTIPLE_CONTEXT_LINK_HEADERS","ignoreMissingContextLinkHeader","contentType","match","stream","PassThrough","parsed","_transform","chunk","write","lastDepthCheck","flushStacks","listPointer","listPointerStack","rdfRest","rdfNil","getDefaultGraph","listId","listHead","idStack","listRootDepth","splice","EntryHandlerContainer","isBufferableContainerHandler","pendingContainerFlushBuffers","flushBuffer","unaliasKeyword","parentKey","unaliasKeywordParent","emittedStack","handleKey","INVALID_REVERSE_PROPERTY_MAP","inProperty","validationStack","property","Math","max","validationResult","validateKey","valid","isLiteral","entryHandler","ENTRY_HANDLERS","testResult","handle","isStackProcessor","processingStack","validateValueIndexes","unaliasedKeywordCacheStack","processingType","graphStack","graphContainerTermStack","jsonLiteralStack","literalStack","subjects","valueBuffer","unidentifiedValuesBuffer","depthOffsetGraph","getDepthOffsetGraph","graphs","getGraphContainerValue","bufferedValue","reverse","emitQuad","subGraphBuffer","getUnidentifiedGraphBufferSafe","graphBuffer","unidentifiedGraphsBuffer","topLevelProperties","isPropertyHandler","onValue","fill","v","isParsingContextInner","valueJobCb","newOnValueJob","contextTree","jobs","job","executeBufferedJobs","onError","applicableTypeJobs","applicableTypeJobIds","typeJob","isPrefixArray","sortedTypeJobs","job1","job2","sortedApplicableTypeJobIds","jobId","EntryHandlerArrayValue","EntryHandlerKeywordContext","EntryHandlerKeywordId","EntryHandlerKeywordIncluded","EntryHandlerKeywordGraph","EntryHandlerKeywordNest","EntryHandlerKeywordType","EntryHandlerKeywordValue","EntryHandlerKeywordUnknownFallback","EntryHandlerPredicate","EntryHandlerInvalidFallback","ContextTree_1","JsonLdParser_1","contextParser","skipContextValidation","produceGeneralizedRdf","allowSubjectList","rdfDirection","streamingProfileAllowOutOfOrderPlainType","activeProcessingMode","parseFloat","rootContext","parseContext","activeVersion","PROCESSING_MODE_CONFLICT","keysOriginal","contextData","getContextPropagationAware","contextKeyEntry","scopedContext","propagate","originalDepth","hasApplicablePropertyScopedContext","lastKey","lastKeyValue","pendingFlushBuffer","emitError","emitContext","getUnidentifiedValueBufferSafe","getExpandOptions","EXPAND_OPTIONS","shiftStack","depthOffset","deeperIdStack","rdf_data_factory_1","rdfFirst","RDF","rdfType","rdfJson","contextKey","fallback","entry","getContextValue","isContextValueReverse","needle","haystack","indexHashes","index","existingIndexValue","CONFLICTING_INDEXES","getContextValueType","valueToJsonString","getContextValueContainer","getContextSelfOrPropertyScoped","unaliasKeywords","val","valueLanguage","valueDirection","valueIndex","subValue","INVALID_VALUE_OBJECT","INVALID_VALUE_OBJECT_VALUE","INVALID_INDEX_VALUE","INVALID_LANGUAGE_TAGGED_VALUE","INVALID_LANGUAGE_TAGGED_STRING","nullableTermToArray","createLanguageDirectionLiteral","INVALID_TYPED_VALUE","typeTerm","createVocabOrBaseTerm","valueToTerm","INVALID_SET_OR_LIST_OBJECT","listValue","graphContainerEntries","resourceToTerm","stringValueToTerm","XSD_BOOLEAN","XSD_INTEGER","XSD_DOUBLE","predicateToTerm","expanded","intToString","Number","isFinite","isInteger","toExponential","defaultDatatype","contextType","contextLanguage","getContextValueLanguage","contextDirection","getContextValueDirection","direction","valueNode","disableCache","cachedUnaliasedKeyword","unliased","hash","newHash","containers","getContainerHandler","isComplexGraphContainer","validateReverseSubject","INVALID_REVERSE_PROPERTY_VALUE","depthContainer","graphContainerIndex","getContainerGraphIndex","graphId","keyUnaliased","getContainerKey","lastValidDepth","XSD","ContainerHandlerIdentifier","canCombineWithGraph","maybeId","ids","some","handlePendingContainerFlushBuffers","ContainerHandlerIndex","graphContainer","indexKey","indexPropertyRaw","getContextValueIndex","indexProperty","indexValues","indexValue","handlePredicateObject","ContainerHandlerLanguage","INVALID_LANGUAGE_MAP_VALUE","ContainerHandlerType","containerTypeType","entryHasIdentifier","keyOriginal","listRootKey","keyOption","handleListElement","valueOriginal","listRootKeys","newLinkTerm","linkTerm","ContainerHandlerIdentifier_1","ContainerHandlerIndex_1","ContainerHandlerLanguage_1","ContainerHandlerType_1","isSimpleGraphContainer","checkGraphContainer","containersSelf","containersParent","containerHandleName","CONTAINER_HANDLERS","handler","containerName","depthProperties","getPropertiesDepth","depthPropertiesGraph","atGraph","objects","isPropertyReverse","listValueContainer","EntryHandlerKeyword","EntryHandlerKeyword_1","INVALID_STREAMING_KEY_ORDER","INVALID_ID_VALUE","COLLIDING_KEYWORDS","INVALID_INCLUDED_VALUE","valueUnliased","elements","element","INVALID_TYPE_VALUE","hasTypedScopedContext","typeContext","c","keywordType","VALID_KEYWORDS_TYPES","INVALID_REVERSE_VALUE","C","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","COLON","COMMA","TRUE","FALSE","NULL","STRING","NUMBER","START","STOP","TRUE1","TRUE2","TRUE3","FALSE1","FALSE2","FALSE3","FALSE4","NULL1","NULL2","NULL3","NUMBER1","NUMBER3","STRING1","STRING2","STRING3","STRING4","STRING5","STRING6","VALUE","KEY","OBJECT","ARRAY","BACK_SLASH","charCodeAt","FORWARD_SLASH","BACKSPACE","FORM_FEED","NEWLINE","CARRIAGE_RETURN","TAB","STRING_BUFFER_SIZE","tState","string","stringBuffer","alloc","stringBufferOffset","unicode","highSurrogate","bytes_remaining","bytes_in_sequence","temp_buffs","toknam","l","proto","charError","appendStringChar","char","appendStringBuf","start","size","copy","n","onToken","j","intVal","parseInt","isNaN","token","parseError","pop","parent","BlankNode_1","DefaultGraph_1","Literal_1","NamedNode_1","Quad_1","Variable_1","dataFactoryCounter","blankNodeCounter","blankNodePrefix","INSTANCE","XSD_STRING","resetBlankNodeCounter","RDF_LANGUAGE_STRING","__export","relativeIRI","baseFragmentPos","baseQueryPos","relativeColonPos","removeDotSegmentsOfPath","valueColonPos","baseColonPos","baseIRIScheme","baseSlashAfterColonPos","removeDotSegments","baseIRIPath","baseIRILastSlashPos","lastIndexOf","segmentBuffers","isCharacterAllowedAfterRelativePathSegment","colonPosition","searchOffset","pathSeparator","character"],"sourceRoot":""}