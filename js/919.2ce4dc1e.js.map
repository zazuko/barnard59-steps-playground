{"version":3,"file":"js/919.2ce4dc1e.js","mappings":"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","sources":["webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/lib/ParserStream.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/BlankNode.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/DataFactory.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/DefaultGraph.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Literal.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/NamedNode.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Quad.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Variable.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/fromTerm.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/@rdfjs/sink/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/n3/src/N3Writer.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/n3/src/N3Store.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/n3/src/N3StreamParser.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/n3/src/N3StreamWriter.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/n3/src/index.js","webpack://@zazuko/barnard59-steps-playground/./node_modules/readable-to-readable/index.js"],"sourcesContent":["const ParserStream = require('./lib/ParserStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const N3 = require('n3')\nconst rdf = require('@rdfjs/data-model')\nconst { finished } = require('readable-stream')\nconst ReadableToReadable = require('readable-to-readable')\n\nclass ParserStream extends ReadableToReadable {\n  constructor (input, { baseIRI = '', factory = rdf } = {}) {\n    const parser = new N3.StreamParser({ baseIRI, factory })\n\n    super(parser, { objectMode: true })\n\n    parser.on('prefix', (prefix, term) => {\n      this.emit('prefix', prefix, term)\n    })\n\n    parser.on('error', err => {\n      this.destroy(err)\n    })\n\n    finished(this, () => {\n      parser.end()\n    })\n\n    input.pipe(parser)\n  }\n}\n\nmodule.exports = ParserStream\n","const DataFactory = require('./lib/DataFactory.js')\n\nmodule.exports = DataFactory\n","class BlankNode {\n  constructor (id) {\n    this.value = id || ('b' + (++BlankNode.nextId))\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n","const BlankNode = require('./BlankNode.js')\nconst DefaultGraph = require('./DefaultGraph.js')\nconst fromTermRaw = require('./fromTerm.js')\nconst Literal = require('./Literal.js')\nconst NamedNode = require('./NamedNode.js')\nconst Quad = require('./Quad.js')\nconst Variable = require('./Variable.js')\n\nfunction namedNode (value) {\n  return new NamedNode(value)\n}\n\nfunction blankNode (value) {\n  return new BlankNode(value)\n}\n\nfunction literal (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nfunction variable (value) {\n  return new Variable(value)\n}\n\nfunction defaultGraph () {\n  return DataFactory.defaultGraphInstance\n}\n\nfunction triple (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nfunction quad (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nfunction fromTerm (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nfunction fromQuad (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n}\n\nmodule.exports = DataFactory\n","class DefaultGraph {\n  equals (other) {\n    return !!other && other.termType === this.termType\n  }\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\nDefaultGraph.prototype.value = ''\n\nmodule.exports = DefaultGraph\n","const NamedNode = require('./NamedNode.js')\n\nclass Literal {\n  constructor (value, language, datatype) {\n    this.value = value\n    this.datatype = Literal.stringDatatype\n    this.language = ''\n\n    if (language) {\n      this.language = language\n      this.datatype = Literal.langStringDatatype\n    } else if (datatype) {\n      this.datatype = datatype\n    }\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value &&\n      other.language === this.language && other.datatype.equals(this.datatype)\n  }\n}\n\nLiteral.prototype.termType = 'Literal'\n\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n","class NamedNode {\n  constructor (iri) {\n    this.value = iri\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n","const DefaultGraph = require('./DefaultGraph.js')\n\nclass Quad {\n  constructor (subject, predicate, object, graph) {\n    this.subject = subject\n    this.predicate = predicate\n    this.object = object\n\n    if (graph) {\n      this.graph = graph\n    } else {\n      this.graph = new DefaultGraph()\n    }\n  }\n\n  equals (other) {\n    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n    return !!other && (other.termType === 'Quad' || !other.termType) &&\n      other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n      other.object.equals(this.object) && other.graph.equals(this.graph)\n  }\n}\n\nQuad.prototype.termType = 'Quad'\nQuad.prototype.value = ''\n\nmodule.exports = Quad\n","class Variable {\n  constructor (name) {\n    this.value = name\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n","function fromTerm (original) {\n  if (!original) {\n    return null\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value)\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph()\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value)\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject)\n    const predicate = this.fromTerm(original.predicate)\n    const object = this.fromTerm(original.object)\n    const graph = this.fromTerm(original.graph)\n\n    return this.quad(subject, predicate, object, graph)\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value)\n  }\n\n  throw new Error(`unknown termType ${original.termType}`)\n}\n\nmodule.exports = fromTerm\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n      if (options.baseIRI) {\n        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)\n            }${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);\n        this._baseLength = options.baseIRI.length;\n      }\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist, /[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\nfunction escapeRegex(regex) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport { Readable } from 'readable-stream';\nimport namespaces from './IRIs';\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graphId` will be the graph of the created quads.\n  *_findInIndex(index0, key0, key1, key2, name0, name1, name2, graphId) {\n    let tmp, index1, index2;\n    const entityKeys = this._entities;\n    const graph = termFromId(graphId, this._factory);\n    const parts = { subject: null, predicate: null, object: null };\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        parts[name0] = termFromId(entityKeys[value0], this._factory);\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            parts[name1] = termFromId(entityKeys[value1], this._factory);\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\n              yield this._factory.quad(parts.subject, parts.predicate, parts.object, graph);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    const graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `add` adds the specified quad to the dataset.\n  // Returns the dataset instance it was called on.\n  // Existing quads, as defined in Quad.equals, will be ignored.\n  add(quad) {\n    this.addQuad(quad);\n    return this;\n  }\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids;\n    const entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `delete` removes the specified quad from the dataset.\n  // Returns the dataset instance it was called on.\n  delete(quad) {\n    this.removeQuad(quad);\n    return this;\n  }\n\n  // ### `has` determines whether a dataset includes a certain quad or quad pattern.\n  has(subjectOrQuad, predicate, object, graph) {\n    if (subjectOrQuad && subjectOrQuad.subject)\n      ({ subject: subjectOrQuad, predicate, object, graph } = subjectOrQuad);\n    return !this.readQuads(subjectOrQuad, predicate, object, graph).next().done;\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids, graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    stream._read = () => {\n      for (const quad of this.readQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return this.remove(stream);\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    return [...this.readQuads(subject, predicate, object, graph)];\n  }\n\n  // ### `readQuads` returns an generator of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  *readQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            yield* this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            yield* this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          yield* this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          yield* this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          yield* this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId);\n      }\n    }\n  }\n\n  // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\n  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.\n  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.\n  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  // For backwards compatibility, the object return also implements the Readable stream interface.\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    let some = false;\n    const every = !this.some(quad => {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    for (const quad of this.readQuads(subject, predicate, object, graph))\n      if (callback(quad))\n        return true;\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n\n  // ### Store is an iterable.\n  // Can be used where iterables are expected: for...of loops, array spread operator,\n  // `yield*`, and destructuring assignment (order is not guaranteed).\n  *[Symbol.iterator]() {\n    yield* this.readQuads();\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n\n/**\n * A class that implements both DatasetCore and Readable.\n */\nclass DatasetCoreAndReadableStream extends Readable {\n  constructor(n3Store, subject, predicate, object, graph) {\n    super({ objectMode: true });\n    Object.assign(this, { n3Store, subject, predicate, object, graph });\n  }\n\n  get filtered() {\n    if (!this._filtered) {\n      const { n3Store, graph, object, predicate, subject } = this;\n      const newStore = this._filtered = new N3Store({ factory: n3Store._factory });\n      for (const quad of n3Store.readQuads(subject, predicate, object, graph))\n        newStore.addQuad(quad);\n    }\n    return this._filtered;\n  }\n\n  get size() {\n    return this.filtered.size;\n  }\n\n  _read() {\n    for (const quad of this)\n      this.push(quad);\n    this.push(null);\n  }\n\n  add(quad) {\n    return this.filtered.add(quad);\n  }\n\n  delete(quad) {\n    return this.filtered.delete(quad);\n  }\n\n  has(quad) {\n    return this.filtered.has(quad);\n  }\n\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);\n  }\n\n  *[Symbol.iterator]() {\n    yield* this._filtered || this.n3Store.readQuads(this.subject, this.predicate, this.object, this.graph);\n  }\n}\n","// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","import Lexer from './N3Lexer';\nimport Parser from './N3Parser';\nimport Writer from './N3Writer';\nimport Store from './N3Store';\nimport StreamParser from './N3StreamParser';\nimport StreamWriter from './N3StreamWriter';\nimport * as Util from './N3Util';\n\nimport {\n  default as DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n} from './N3DataFactory';\n\n// Named exports\nexport {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StreamParser,\n  StreamWriter,\n  Util,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n\n// Export all named exports as a default object for backward compatibility\nexport default {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StreamParser,\n  StreamWriter,\n  Util,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n","const { finished, Readable } = require('readable-stream')\n\nfunction nextLoop () {\n  return new Promise(resolve => setTimeout(resolve, 0))\n}\n\nclass ReadableToReadable extends Readable {\n  constructor (input, { end = true, map, ...args } = {}) {\n    super({\n      read: ReadableToReadable.readFrom(input, { end, map }),\n      ...args\n    })\n  }\n\n  static readFrom (input, { end = true, map = v => v } = {}) {\n    let done = false\n\n    finished(input, () => {\n      done = true\n    })\n\n    const read = async function () {\n      while (true) {\n        const chunk = input.read()\n\n        if (!chunk) {\n          if (done && end) {\n            this.push(null)\n          }\n\n          if (done) {\n            return true\n          }\n\n          await nextLoop()\n        } else {\n          if (!this.push(map(chunk))) {\n            return false\n          }\n        }\n      }\n    }\n\n    return read\n  }\n}\n\nmodule.exports = ReadableToReadable\n"],"names":["ParserStream","Sink","Parser","constructor","options","super","module","exports","N3","rdf","finished","ReadableToReadable","input","baseIRI","factory","parser","StreamParser","objectMode","on","prefix","term","this","emit","err","destroy","end","pipe","DataFactory","BlankNode","id","value","nextId","equals","other","termType","prototype","DefaultGraph","fromTermRaw","Literal","NamedNode","Quad","Variable","namedNode","blankNode","literal","languageOrDatatype","indexOf","variable","defaultGraph","defaultGraphInstance","triple","subject","predicate","object","quad","graph","fromTerm","original","call","fromQuad","language","datatype","stringDatatype","langStringDatatype","iri","name","Error","Impl","import","output","Object","assign","readable","DEFAULTGRAPH","N3DataFactory","xsd","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","_outputStream","_endStream","undefined","chunk","encoding","done","_subject","test","format","_lineMode","_writeQuad","_writeQuadLine","_graph","_prefixIRIs","create","prefixes","addPrefixes","_baseMatcher","RegExp","escapeRegex","endsWith","_baseLength","length","_inDefaultGraph","_write","string","callback","_encodeIriOrBlank","_predicate","_encodeObject","_encodePredicate","_encodeSubject","error","_prefixMatch","quadToString","quadsToString","quads","map","t","join","entity","_encodeQuad","list","substr","replace","characterReplacer","prefixMatch","exec","_encodeLiteral","boolean","integer","decimal","double","type","isDefaultGraph","_blockedWrite","addQuad","addQuads","i","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","child","children","contents","elements","Array","singleDone","result","character","charCodeAt","toString","regex","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","key","name0","name1","name2","graphId","tmp","entityKeys","parts","value0","value1","values","l","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","count","_getGraphs","isString","_uniqueEntities","uniqueIds","add","graphItem","predicates","objects","freeze","ids","entities","changed","delete","removeQuad","has","subjectOrQuad","readQuads","next","stream","removeQuads","remove","removeMatches","Readable","_read","push","deleteGraph","getQuads","content","subjectId","predicateId","objectId","_findInIndex","match","DatasetCoreAndReadableStream","countQuads","forEach","some","every","getSubjects","results","forSubjects","s","getPredicates","forPredicates","p","getObjects","forObjects","o","getGraphs","forGraphs","g","createBlankNode","suggestedName","index","extractLists","ignoreErrors","onError","node","message","tails","toRemove","tailQuad","items","head","headPos","malformed","current","objectQuads","subjectQuads","first","rest","parent","unshift","Symbol","iterator","String","n3Store","filtered","_filtered","newStore","N3StreamParser","Transform","decodeStrings","_readableState","N3Parser","onData","onEnd","parse","event","uri","_transform","_flush","N3StreamWriter","writableObjectMode","writer","_writer","Lexer","Writer","Store","StreamWriter","Util","Term","Triple","termFromId","termToId","nextLoop","Promise","resolve","setTimeout","args","read","readFrom","static","v","async"],"sourceRoot":""}